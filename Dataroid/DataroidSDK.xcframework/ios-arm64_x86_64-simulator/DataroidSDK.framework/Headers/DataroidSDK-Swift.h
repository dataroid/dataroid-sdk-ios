#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef DATAROIDSDK_SWIFT_H
#define DATAROIDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DataroidSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS_NAMED("APMAttributes")
@interface DTRAPMAttributes : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
@class NSDate;

@interface DTRAPMAttributes (SWIFT_EXTENSION(DataroidSDK))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end

@protocol DTRAutoCollectionApmListener;
@class DTRHTTPCallAttributes;
@class DTRNetworkErrorAttributes;

SWIFT_PROTOCOL("_TtP11DataroidSDK17APMClientProtocol_")
@protocol APMClientProtocol
@property (nonatomic, strong) id <DTRAutoCollectionApmListener> _Nullable delegate;
- (void)collectHTTPCall:(DTRHTTPCallAttributes * _Nonnull)attributes;
- (void)collectNetworkError:(DTRNetworkErrorAttributes * _Nonnull)attributes;
@end


SWIFT_CLASS("_TtC11DataroidSDK9APMConfig")
@interface APMConfig : NSObject
@property (nonatomic) BOOL enabled;
@property (nonatomic) BOOL autoCollectingEnabled;
@property (nonatomic) NSInteger storageLimit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("Attributes")
@interface DTRAttributes : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DTRProduct;

SWIFT_CLASS_NAMED("AddToCardEventAttributes")
@interface DTRAddToCardEventAttributes : DTRAttributes
- (nonnull instancetype)initWithProduct:(DTRProduct * _Nonnull)product OBJC_DESIGNATED_INITIALIZER;
- (DTRAddToCardEventAttributes * _Nonnull)addValue:(NSDecimal)value;
- (DTRAddToCardEventAttributes * _Nonnull)addTotalCartValue:(NSDecimal)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("AddToWishListEventAttributes")
@interface DTRAddToWishListEventAttributes : DTRAttributes
- (nonnull instancetype)initWithProduct:(DTRProduct * _Nonnull)product OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol DTRAppInboxDelegate;
@class DTRInboxMessage;
@class DTRAppInboxQuery;

SWIFT_CLASS_NAMED("AppInbox")
@interface DTRAppInbox : NSObject
/// App Inbox delegate
@property (nonatomic, weak) id <DTRAppInboxDelegate> _Nullable delegate;
/// Fetchs stored inbox messages from database
- (NSArray<DTRInboxMessage *> * _Nullable)fetchMessages SWIFT_WARN_UNUSED_RESULT;
/// Fetchs stored inbox messages from database with query
/// \param query Query for messages
///
- (NSArray<DTRInboxMessage *> * _Nullable)fetchMessagesWithQuery:(DTRAppInboxQuery * _Nullable)query SWIFT_WARN_UNUSED_RESULT;
/// Deletes inbox messages from database
/// \param ids Message identifiers
///
- (BOOL)deleteMessagesWithIds:(NSArray<NSNumber *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Reads inbox messages from database
/// \param ids Message identifiers
///
- (BOOL)readMessagesWithIds:(NSArray<NSNumber *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_PROTOCOL("_TtP11DataroidSDK22AppInboxClientProtocol_")
@protocol AppInboxClientProtocol
@property (nonatomic, strong) id <DTRAppInboxDelegate> _Nullable delegate;
- (NSArray<DTRInboxMessage *> * _Nullable)fetchMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray<DTRInboxMessage *> * _Nullable)fetchMessagesWithQuery:(DTRAppInboxQuery * _Nullable)query SWIFT_WARN_UNUSED_RESULT;
- (BOOL)deleteMessagesWithIds:(NSArray<NSNumber *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
- (BOOL)readMessagesWithIds:(NSArray<NSNumber *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11DataroidSDK14AppInboxConfig")
@interface AppInboxConfig : NSObject
@property (nonatomic) BOOL enabled;
@property (nonatomic) NSInteger storageLimit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Interface for handling inbox events
SWIFT_PROTOCOL_NAMED("AppInboxDelegate")
@protocol DTRAppInboxDelegate
/// Called when a message is updated
/// \param inbox App inbox
///
/// \param message Updated message
///
- (void)inbox:(DTRAppInbox * _Nonnull)inbox didUpdate:(DTRInboxMessage * _Nonnull)message;
/// Called when messages are removed from inbox
/// \param inbox App Inbox
///
/// \param ids Removed message identifiers
///
- (void)inbox:(DTRAppInbox * _Nonnull)inbox didDeleteMessages:(NSArray<NSNumber *> * _Nonnull)ids;
@end

enum DTRInboxMessageType : NSInteger;
enum DTRInboxMessageStatus : NSInteger;

SWIFT_CLASS_NAMED("AppInboxQuery")
@interface DTRAppInboxQuery : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (DTRAppInboxQuery * _Nonnull)messageType:(enum DTRInboxMessageType)messageType SWIFT_WARN_UNUSED_RESULT;
- (DTRAppInboxQuery * _Nonnull)status:(enum DTRInboxMessageStatus)status SWIFT_WARN_UNUSED_RESULT;
- (DTRAppInboxQuery * _Nonnull)from:(NSDate * _Nonnull)from SWIFT_WARN_UNUSED_RESULT;
- (DTRAppInboxQuery * _Nonnull)to:(NSDate * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
- (DTRAppInboxQuery * _Nonnull)anonymous:(BOOL)anonymous SWIFT_WARN_UNUSED_RESULT;
@end

@class NSData;
@class UNNotificationResponse;

SWIFT_CLASS_NAMED("ApplicationListener")
@interface DTRAppListener : NSObject
- (void)didFinishLaunchingWith:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
- (void)didRegisterForRemoteNotificationsWith:(NSData * _Nonnull)deviceToken;
- (void)userNotificationCenterDidReceive:(UNNotificationResponse * _Nonnull)response;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSNumber;

@interface DTRAttributes (SWIFT_EXTENSION(DataroidSDK))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addNumber:(NSNumber * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end

@class DTRMutableHttpCallAttributes;
@class DTRMutableNetworkErrorAttributes;

SWIFT_PROTOCOL_NAMED("AutoCollectingApmListener")
@protocol DTRAutoCollectionApmListener
@optional
- (DTRMutableHttpCallAttributes * _Nonnull)willCollectHttpCallWithAttributes:(DTRHTTPCallAttributes * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
- (DTRMutableNetworkErrorAttributes * _Nonnull)willCollectNetworkErrorWithAttributes:(DTRNetworkErrorAttributes * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS_NAMED("UIEventTrackingAttributes")
@interface DTRUIEventTrackingAttributes : NSObject
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIButton;
@class DTRUIViewPixelCoordinate;

SWIFT_CLASS_NAMED("ButtonTrackingAttributes")
@interface DTRButtonTrackingAttributes : DTRUIEventTrackingAttributes
/// Initialize ButtonTrackingAttributes
/// \param button button to track
///
- (nonnull instancetype)initWithButton:(UIButton * _Nonnull)button OBJC_DESIGNATED_INITIALIZER;
/// Initialize ButtonTrackingAttributes
/// \param className className for button (e.g. “UIButton”)
///
/// \param label label for button (e.g. button.title)
///
/// \param accessibilityLabel accessibilityLabel for button
///
/// \param componentId componentId for button
///
/// \param coordinates coordinates for button. (e.g. button.frame)
///
/// \param viewLabel viewLabel for button’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for button’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithClassName:(NSString * _Nonnull)className label:(NSString * _Nullable)label accessibilityLabel:(NSString * _Nullable)accessibilityLabel componentId:(NSString * _Nullable)componentId coordinates:(DTRUIViewPixelCoordinate * _Nullable)coordinates viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end

@class DTRCertificateFile;

SWIFT_CLASS_NAMED("Certificate")
@interface DTRCertificate : NSObject
+ (DTRCertificate * _Nonnull)file:(DTRCertificateFile * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
+ (DTRCertificate * _Nonnull)base64:(NSString * _Nonnull)encodedString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSBundle;

SWIFT_CLASS_NAMED("CertificateFile")
@interface DTRCertificateFile : NSObject
- (nonnull instancetype)initWithBundle:(NSBundle * _Nonnull)bundle fileName:(NSString * _Nonnull)fileName fileExtension:(NSString * _Nonnull)fileExtension OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ClearCartEventAttributes")
@interface DTRClearCartEventAttributes : DTRAttributes
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DTRPurchaseEventAttributes;
@class DTRSearchEventAttributes;
@class DTRViewProductEventAttributes;
@class DTRViewCategoryEventAttributes;
@class DTRRemoveFromCartEventAttributes;
@class DTRStartCheckoutEventAttributes;
@class DTRRemoveFromWishListEventAttributes;

SWIFT_PROTOCOL("_TtP11DataroidSDK22CommerceClientProtocol_")
@protocol CommerceClientProtocol
- (void)collectPurchase:(DTRPurchaseEventAttributes * _Nonnull)attributes;
- (void)collectSearch:(DTRSearchEventAttributes * _Nonnull)attributes;
- (void)collectViewProduct:(DTRViewProductEventAttributes * _Nonnull)attributes;
- (void)collectViewCategory:(DTRViewCategoryEventAttributes * _Nonnull)attributes;
- (void)collectAddToCard:(DTRAddToCardEventAttributes * _Nonnull)attributes;
- (void)collectRemoveFromCart:(DTRRemoveFromCartEventAttributes * _Nonnull)attributes;
- (void)collectClearCart:(DTRClearCartEventAttributes * _Nonnull)attributes;
- (void)collectStartCheckout:(DTRStartCheckoutEventAttributes * _Nonnull)attributes;
- (void)collectAddToWishList:(DTRAddToWishListEventAttributes * _Nonnull)attributes;
- (void)collectRemoveFromWishList:(DTRRemoveFromWishListEventAttributes * _Nonnull)attributes;
@end

@class DTRTextFieldTrackingAttributes;
@class DTRSwitchButtonTrackingAttributes;

SWIFT_PROTOCOL("_TtP11DataroidSDK34ComponentInteractionClientProtocol_")
@protocol ComponentInteractionClientProtocol
- (void)collectButtonClick:(DTRButtonTrackingAttributes * _Nonnull)attributes;
- (void)collectTextChange:(DTRTextFieldTrackingAttributes * _Nonnull)attributes;
- (void)collectToggleChange:(DTRSwitchButtonTrackingAttributes * _Nonnull)attributes;
@end


SWIFT_CLASS("_TtC11DataroidSDK26ComponentInteractionConfig")
@interface ComponentInteractionConfig : NSObject
@property (nonatomic) BOOL autoCollectingEnabled;
@property (nonatomic) NSInteger debounceThreshold;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ConnectionType")
@interface DTRNetworkConnectionType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull none;)
+ (DTRNetworkConnectionType * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull cellular;)
+ (DTRNetworkConnectionType * _Nonnull)cellular SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull wifi;)
+ (DTRNetworkConnectionType * _Nonnull)wifi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull ethernet;)
+ (DTRNetworkConnectionType * _Nonnull)ethernet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull bluetooth;)
+ (DTRNetworkConnectionType * _Nonnull)bluetooth SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull wifiAware;)
+ (DTRNetworkConnectionType * _Nonnull)wifiAware SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull loWpan;)
+ (DTRNetworkConnectionType * _Nonnull)loWpan SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull vpn;)
+ (DTRNetworkConnectionType * _Nonnull)vpn SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger rawValue;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)formUnion:(DTRNetworkConnectionType * _Nonnull)other;
- (void)formIntersection:(DTRNetworkConnectionType * _Nonnull)other;
- (void)formSymmetricDifference:(DTRNetworkConnectionType * _Nonnull)other;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@class TriggeredContext;

SWIFT_PROTOCOL("_TtP11DataroidSDK30ContextTriggerListenerDelegate_")
@protocol ContextTriggerListenerDelegate
- (void)contextTriggeredWithContext:(TriggeredContext * _Nonnull)context;
@end

@class NSError;
@class NSException;

SWIFT_PROTOCOL("_TtP11DataroidSDK28CrashReportingClientProtocol_")
@protocol CrashReportingClientProtocol
- (void)collectError:(NSError * _Nonnull)error stacktrace:(NSArray<NSString *> * _Nonnull)stacktrace;
- (void)collectException:(NSException * _Nonnull)exception stacktrace:(NSArray<NSString *> * _Nonnull)stacktrace;
@end


SWIFT_CLASS("_TtC11DataroidSDK20CrashReportingConfig")
@interface CrashReportingConfig : NSObject
@property (nonatomic) BOOL autoCollectingEnabled;
@property (nonatomic) NSInteger storageLimit;
@property (nonatomic) BOOL threadCollection;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull exceptionExclusions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11DataroidSDK25CustomEventClientProtocol_")
@protocol CustomEventClientProtocol
- (void)collectEventWithName:(NSString * _Nonnull)name attributes:(DTRAttributes * _Nonnull)attributes;
- (void)collectEventWithName:(NSString * _Nonnull)name;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("DBAPMRecord")
@interface DBAPMRecord : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




@interface DBAPMRecord (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBActionBased")
@interface DBActionBased : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




@interface DBActionBased (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic, copy) NSDate * _Nullable date;
@property (nonatomic) BOOL delivered;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable parentId;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBEvent")
@interface DBEvent : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




@interface DBEvent (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) int64_t id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBGeofence")
@interface DBGeofence : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBGeofence (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBGoal")
@interface DBGoal : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




@interface DBGoal (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic, copy) NSString * _Nullable eventName;
@property (nonatomic, copy) NSDate * _Nullable expDate;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBInboxMessage")
@interface DBInboxMessage : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




@interface DBInboxMessage (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic, copy) NSString * _Nullable customerId;
@property (nonatomic, copy) NSDate * _Nullable expirationDate;
@property (nonatomic) int64_t id;
@property (nonatomic, copy) NSString * _Nullable payload;
@property (nonatomic, copy) NSString * _Nullable pushId;
@property (nonatomic, copy) NSDate * _Nullable receivedDate;
@property (nonatomic, copy) NSString * _Nullable scheduleId;
@property (nonatomic) int16_t status;
@property (nonatomic) int16_t type;
@end


SWIFT_CLASS_NAMED("DBSession")
@interface DBSession : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBSession (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end

@class NSURLSessionTask;
@class NSURL;

SWIFT_CLASS("_TtC11DataroidSDK22DTRURLSessionCollector")
@interface DTRURLSessionCollector : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRURLSessionCollector * _Nonnull shared;)
+ (DTRURLSessionCollector * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)startTrackingWithTask:(NSURLSessionTask * _Nonnull)task;
- (void)endTrackingWithTask:(NSURLSessionTask * _Nullable)task data:(NSData * _Nullable)data;
- (void)endTrackingWithUrl:(NSURL * _Nonnull)url data:(NSData * _Nullable)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC11DataroidSDK14DatabaseConfig")
@interface DatabaseConfig : NSObject
@property (nonatomic) BOOL resetDatabase;
- (nonnull instancetype)initWithDatabaseEncryptionKey:(NSArray<NSNumber *> * _Nullable)databaseEncryptionKey databaseEncryptionEnabled:(BOOL)databaseEncryptionEnabled OBJC_DESIGNATED_INITIALIZER;
- (void)migrateToRawKeyFrom:(NSString * _Nonnull)previousDatabaseEncryptionKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class DataroidConfig;
@class DTRPushEventManager;
@protocol GeolocationClientProtocol;
@protocol InAppClientProtocol;
@protocol ScreenTrackingClientProtocol;
@protocol ScreenInteractionClientProtocol;

SWIFT_CLASS("_TtC11DataroidSDK8Dataroid")
@interface Dataroid : NSObject
@property (nonatomic, weak) id <ContextTriggerListenerDelegate> _Nullable contextTriggerListenerDelegate;
@property (nonatomic, readonly, strong) DataroidConfig * _Nonnull config;
@property (nonatomic, readonly, strong) DTRPushEventManager * _Nonnull pushEventManager;
@property (nonatomic, readonly, strong) id <GeolocationClientProtocol> _Nonnull geolocation;
@property (nonatomic, readonly, strong) id <CommerceClientProtocol> _Nonnull commerce;
@property (nonatomic, readonly, strong) id <APMClientProtocol> _Nonnull apm;
@property (nonatomic, readonly, strong) id <InAppClientProtocol> _Nonnull inApp;
@property (nonatomic, readonly, strong) id <ScreenTrackingClientProtocol> _Nonnull screenTracking;
@property (nonatomic, readonly, strong) id <AppInboxClientProtocol> _Nullable appInbox;
@property (nonatomic, readonly, strong) id <ComponentInteractionClientProtocol> _Nonnull componentInteraction;
@property (nonatomic, readonly, strong) id <ScreenInteractionClientProtocol> _Nonnull screenInteraction;
@property (nonatomic, readonly, strong) DTRAppListener * _Nonnull appListener;
+ (Dataroid * _Nullable)initializeWithConfig:(DataroidConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)pauseEventCollection;
- (void)resumeEventCollection;
@end



@class WKWebView;

SWIFT_PROTOCOL("_TtP11DataroidSDK23WebBridgeClientProtocol_")
@protocol WebBridgeClientProtocol
- (void)trackWebView:(WKWebView * _Nonnull)webView;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <WebBridgeClientProtocol>
- (void)trackWebView:(WKWebView * _Nonnull)webView;
@end


SWIFT_PROTOCOL("_TtP11DataroidSDK22LanguageClientProtocol_")
@protocol LanguageClientProtocol
- (void)updateLanguage:(NSString * _Nonnull)languageCode;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <LanguageClientProtocol>
- (void)updateLanguage:(NSString * _Nonnull)languageCode;
@end

@class DTRDeeplinkAttributes;

SWIFT_PROTOCOL("_TtP11DataroidSDK22DeeplinkClientProtocol_")
@protocol DeeplinkClientProtocol
- (void)collectDeeplink:(DTRDeeplinkAttributes * _Nonnull)attributes;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <DeeplinkClientProtocol>
- (void)collectDeeplink:(DTRDeeplinkAttributes * _Nonnull)attributes;
@end




@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <CustomEventClientProtocol>
- (void)collectEventWithName:(NSString * _Nonnull)name attributes:(DTRAttributes * _Nonnull)attributes;
- (void)collectEventWithName:(NSString * _Nonnull)name;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <CrashReportingClientProtocol>
- (void)collectError:(NSError * _Nonnull)error stacktrace:(NSArray<NSString *> * _Nonnull)stacktrace;
- (void)collectException:(NSException * _Nonnull)exception stacktrace:(NSArray<NSString *> * _Nonnull)stacktrace;
@end

@class DataroidUser;

SWIFT_PROTOCOL("_TtP11DataroidSDK18UserClientProtocol_")
@protocol UserClientProtocol
- (void)setUser:(DataroidUser * _Nonnull)user;
- (void)clearUser;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <UserClientProtocol>
- (void)setUser:(DataroidUser * _Nonnull)user;
- (void)clearUser;
@end


SWIFT_PROTOCOL("_TtP11DataroidSDK22GeofenceClientProtocol_")
@protocol GeofenceClientProtocol
- (void)enableGeofencing;
- (void)disableGeofencing;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <GeofenceClientProtocol>
- (void)enableGeofencing;
- (void)disableGeofencing;
@end




SWIFT_PROTOCOL("_TtP11DataroidSDK20LoggerClientProtocol_")
@protocol LoggerClientProtocol
- (void)verbose:(NSString * _Nullable)message;
- (void)debug:(NSString * _Nullable)message;
- (void)info:(NSString * _Nullable)message;
- (void)warning:(NSString * _Nullable)message;
- (void)error:(NSString * _Nullable)message;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <LoggerClientProtocol>
- (void)verbose:(NSString * _Nullable)message;
- (void)debug:(NSString * _Nullable)message;
- (void)info:(NSString * _Nullable)message;
- (void)warning:(NSString * _Nullable)message;
- (void)error:(NSString * _Nullable)message;
@end



SWIFT_PROTOCOL("_TtP11DataroidSDK28SuperAttributeClientProtocol_")
@protocol SuperAttributeClientProtocol
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key intValue:(NSInteger)intValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key doubleValue:(double)doubleValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key int64Value:(int64_t)int64Value;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key floatValue:(float)floatValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key boolValue:(BOOL)boolValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key dateValue:(NSDate * _Nonnull)dateValue;
- (BOOL)clearSuperAttributeWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)clearAllSuperAttributes;
- (NSDictionary<NSString *, id> * _Nonnull)getAllSuperAttributes SWIFT_WARN_UNUSED_RESULT;
- (void)updateSuperAttributeWithKey:(NSString * _Nonnull)key value:(id _Nonnull)value;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <SuperAttributeClientProtocol>
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key intValue:(NSInteger)intValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key doubleValue:(double)doubleValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key int64Value:(int64_t)int64Value;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key floatValue:(float)floatValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key boolValue:(BOOL)boolValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key dateValue:(NSDate * _Nonnull)dateValue;
- (BOOL)clearSuperAttributeWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)clearAllSuperAttributes;
- (NSDictionary<NSString *, id> * _Nonnull)getAllSuperAttributes SWIFT_WARN_UNUSED_RESULT;
- (void)updateSuperAttributeWithKey:(NSString * _Nonnull)key value:(id _Nonnull)value;
@end


@class InAppMessagingConfig;
@class LoggerConfig;
@class NetworkConfig;
@class SessionConfig;
@class ScreenInteractionConfig;
@class ScreenTrackingConfig;
@class SnapshotConfig;
@class NotificationConfig;

SWIFT_CLASS("_TtC11DataroidSDK14DataroidConfig")
@interface DataroidConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull serverURL;
@property (nonatomic, readonly, copy) NSString * _Nullable appGroup;
@property (nonatomic, copy) NSString * _Nullable frameworkIdentifier;
@property (nonatomic) NSInteger eventStorageLimit;
@property (nonatomic, strong) APMConfig * _Nonnull apm;
@property (nonatomic, strong) AppInboxConfig * _Nonnull appInbox;
@property (nonatomic, strong) ComponentInteractionConfig * _Nonnull componentInteraction;
@property (nonatomic, strong) CrashReportingConfig * _Nonnull crashReporting;
@property (nonatomic, strong) DatabaseConfig * _Nonnull database;
@property (nonatomic, strong) InAppMessagingConfig * _Nonnull inApp;
@property (nonatomic, strong) LoggerConfig * _Nonnull logger;
@property (nonatomic, strong) NetworkConfig * _Nonnull network;
@property (nonatomic, strong) SessionConfig * _Nonnull session;
@property (nonatomic, strong) ScreenInteractionConfig * _Nonnull screenInteraction;
@property (nonatomic, strong) ScreenTrackingConfig * _Nonnull screenTracking;
@property (nonatomic, strong) SnapshotConfig * _Nonnull snapshot;
@property (nonatomic, strong) NotificationConfig * _Nonnull notification;
@property (nonatomic, copy) NSString * _Nullable previousDomainParameter;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull blacklistedEvents;
@property (nonatomic, readonly, copy) NSString * _Nonnull languageCode;
@property (nonatomic) BOOL eventCollectingEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithSdkKey:(NSString * _Nonnull)sdkKey serverURL:(NSString * _Nonnull)serverURL appGroup:(NSString * _Nonnull)appGroup languageCode:(NSString * _Nonnull)languageCode databaseConfig:(DatabaseConfig * _Nullable)databaseConfig OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSdkKey:(NSString * _Nonnull)sdkKey serverURL:(NSString * _Nonnull)serverURL appGroup:(NSString * _Nonnull)appGroup languageCode:(NSString * _Nonnull)languageCode;
@end




SWIFT_CLASS("_TtC11DataroidSDK23DataroidPredefinedEvent")
@interface DataroidPredefinedEvent : NSObject
/// Avoid initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Event name for screen tracking start event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewTrackingStart;)
+ (NSString * _Nonnull)viewTrackingStart SWIFT_WARN_UNUSED_RESULT;
/// Event name for screen tracking stop event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewTrackingStop;)
+ (NSString * _Nonnull)viewTrackingStop SWIFT_WARN_UNUSED_RESULT;
/// Event name for push token update event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pushTokenUpdate;)
+ (NSString * _Nonnull)pushTokenUpdate SWIFT_WARN_UNUSED_RESULT;
/// Event name for language update event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull languageUpdate;)
+ (NSString * _Nonnull)languageUpdate SWIFT_WARN_UNUSED_RESULT;
/// Event name for user information update event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userUpdate;)
+ (NSString * _Nonnull)userUpdate SWIFT_WARN_UNUSED_RESULT;
/// Event name for session start event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sessionStart;)
+ (NSString * _Nonnull)sessionStart SWIFT_WARN_UNUSED_RESULT;
/// Event name for session stop event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sessionStop;)
+ (NSString * _Nonnull)sessionStop SWIFT_WARN_UNUSED_RESULT;
/// Event name for notification open event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationOpen;)
+ (NSString * _Nonnull)notificationOpen SWIFT_WARN_UNUSED_RESULT;
/// Event name for notification received event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationReceived;)
+ (NSString * _Nonnull)notificationReceived SWIFT_WARN_UNUSED_RESULT;
/// Event name for goal achieved event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull goalAchieved;)
+ (NSString * _Nonnull)goalAchieved SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message button click event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageButtonClick;)
+ (NSString * _Nonnull)inAppMessageButtonClick SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message read, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageRead;)
+ (NSString * _Nonnull)inAppMessageRead SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message close, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageClose;)
+ (NSString * _Nonnull)inAppMessageClose SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message fetched
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageFetched;)
+ (NSString * _Nonnull)inAppMessageFetched SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s first opening, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkFirstOpen;)
+ (NSString * _Nonnull)sdkFirstOpen SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s device update settings event, shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceUpdateSettings;)
+ (NSString * _Nonnull)deviceUpdateSettings SWIFT_WARN_UNUSED_RESULT;
/// Event name for APM network errors, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull apmNetworkError;)
+ (NSString * _Nonnull)apmNetworkError SWIFT_WARN_UNUSED_RESULT;
/// Event name for APM http events, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull apmHTTPCall;)
+ (NSString * _Nonnull)apmHTTPCall SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s add to cart commerce event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addToCart;)
+ (NSString * _Nonnull)addToCart SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that user completes a purchase,
/// shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchase;)
+ (NSString * _Nonnull)purchase SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s search commerce event, shouldn’t be used manually
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull search;)
+ (NSString * _Nonnull)search SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s view product commerce event
/// that whenever a single product is displayed, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewProduct;)
+ (NSString * _Nonnull)viewProduct SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that user lists items within a specific category,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewCategory;)
+ (NSString * _Nonnull)viewCategory SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that removing item(s) from cart,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull removeFromCart;)
+ (NSString * _Nonnull)removeFromCart SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that user removes all items from cart,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clearCart;)
+ (NSString * _Nonnull)clearCart SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event for initiating a checkout/payment process,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull startCheckout;)
+ (NSString * _Nonnull)startCheckout SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event
/// that not being able to go to the next step in the checkout funnel,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorCheckout;)
+ (NSString * _Nonnull)errorCheckout SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event
/// that adding an item to wish list,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addToWishList;)
+ (NSString * _Nonnull)addToWishList SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that remove an item from wish list,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull removeFromWishList;)
+ (NSString * _Nonnull)removeFromWishList SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s deeplink launched event that is for used tracking referrals for deeplinks.
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deeplinkLaunched;)
+ (NSString * _Nonnull)deeplinkLaunched SWIFT_WARN_UNUSED_RESULT;
/// UIButton <code>touchUpInside</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull buttonClick;)
+ (NSString * _Nonnull)buttonClick SWIFT_WARN_UNUSED_RESULT;
/// <code>radioButtonSelected</code> event
/// Native apps have no radio button, this event is used for web bridge
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull radioButtonSelect;)
+ (NSString * _Nonnull)radioButtonSelect SWIFT_WARN_UNUSED_RESULT;
/// UISwitch <code>valueChanged</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull toggleChange;)
+ (NSString * _Nonnull)toggleChange SWIFT_WARN_UNUSED_RESULT;
/// UITextField and UITextView <code>textDidEndEditing</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull textChange;)
+ (NSString * _Nonnull)textChange SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>tap</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull touch;)
+ (NSString * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>swipe</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swipe;)
+ (NSString * _Nonnull)swipe SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>long press</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull longPress;)
+ (NSString * _Nonnull)longPress SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>double tap</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull doubleTap;)
+ (NSString * _Nonnull)doubleTap SWIFT_WARN_UNUSED_RESULT;
/// Event name for crash event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull crash;)
+ (NSString * _Nonnull)crash SWIFT_WARN_UNUSED_RESULT;
/// Event name for capping
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull capped;)
+ (NSString * _Nonnull)capped SWIFT_WARN_UNUSED_RESULT;
/// Event name for context triggered
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull contextTriggered;)
+ (NSString * _Nonnull)contextTriggered SWIFT_WARN_UNUSED_RESULT;
@end


/// Interface for view/view controllers, that needs to configure screen tracking
SWIFT_PROTOCOL("_TtP11DataroidSDK34DataroidScreenTrackingConfigurator_")
@protocol DataroidScreenTrackingConfigurator <NSObject>
/// Auto screen tracking name for the object
@property (nonatomic, readonly, copy) NSString * _Nonnull dtr_screenTrackingName;
@end


/// Interface for defining screen tracking exclusions
SWIFT_PROTOCOL("_TtP11DataroidSDK31DataroidScreenTrackingExclusion_")
@protocol DataroidScreenTrackingExclusion <NSObject>
/// Flag that indicates, if current screen should be an exclusion from screen tracking
@property (nonatomic, readonly) BOOL dtr_isAutoScreenTrackingExclusion;
@end


SWIFT_CLASS_NAMED("DataroidTrustPolicy")
@interface DTRTrustPolicy : NSObject
- (nonnull instancetype)initWithEndpoint:(NSString * _Nonnull)endpoint certificates:(NSArray<DTRCertificate *> * _Nonnull)certificates OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum DTRGender : NSInteger;
@class DTRUserAttributes;

SWIFT_CLASS("_TtC11DataroidSDK12DataroidUser")
@interface DataroidUser : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable phone;
@property (nonatomic, copy) NSString * _Nullable nationalId;
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic) enum DTRGender gender;
@property (nonatomic, copy) NSDate * _Nullable dateOfBirth;
@property (nonatomic, strong) DTRUserAttributes * _Nullable attributes;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Event attributes for deeplink launched event that user opens application with deeplink
SWIFT_CLASS_NAMED("DeeplinkAttributes")
@interface DTRDeeplinkAttributes : NSObject
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DTRDeeplinkAttributes (SWIFT_EXTENSION(DataroidSDK))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end


@class DTRTouchPoint;

SWIFT_CLASS_NAMED("TapTrackingAttributes")
@interface DTRTapTrackingAttributes : DTRUIEventTrackingAttributes
/// Initialize TapTrackingAttributes
/// \param touchPoint touchPoint
///
/// \param viewLabel viewLabel for touch’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for touch’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithTouchPoint:(DTRTouchPoint * _Nonnull)touchPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("DoubleTapTrackingAttributes")
@interface DTRDoubleTapTrackingAttributes : DTRTapTrackingAttributes
- (nonnull instancetype)initWithTouchPoint:(DTRTouchPoint * _Nonnull)touchPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DTRGender, "Gender", open) {
  DTRGenderUndefined = 0,
  DTRGenderMale = 1,
  DTRGenderFemale = 2,
  DTRGenderNonBinary = 3,
  DTRGenderUnknown = 4,
};



SWIFT_PROTOCOL("_TtP11DataroidSDK25GeolocationClientProtocol_")
@protocol GeolocationClientProtocol
- (void)setCountry:(NSString * _Nonnull)country;
- (void)setContinent:(NSString * _Nonnull)continent;
- (void)setCity:(NSString * _Nonnull)city;
- (void)setRegion:(NSString * _Nonnull)region;
- (void)setCoordinatesWithLatitude:(double)latitude longitude:(double)longitude;
- (void)clearCountry;
- (void)clearContinent;
- (void)clearCity;
- (void)clearRegion;
- (void)clearCoordinates;
@end

enum DTRHTTPMethod : NSInteger;

/// Object that holds http request & response metrics and relevant
/// properties for the purpose of sending to server
SWIFT_CLASS_NAMED("HTTPCallAttributes")
@interface DTRHTTPCallAttributes : NSObject
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSString * _Nullable errorType;
@property (nonatomic, copy) NSString * _Nullable errorCode;
@property (nonatomic, copy) NSString * _Nullable errorMessage;
/// Object that holds custom attributes
@property (nonatomic, strong) DTRAPMAttributes * _Nullable attributes;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url method:(enum DTRHTTPMethod)method statusCode:(NSInteger)statusCode duration:(NSTimeInterval)duration success:(BOOL)success;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_UNAVAILABLE
@interface DTRHTTPCallAttributes (SWIFT_EXTENSION(DataroidSDK))
- (enum DTRHTTPMethod)getMethod SWIFT_WARN_UNUSED_RESULT;
- (void)setMethod:(enum DTRHTTPMethod)method;
- (NSInteger)getStatusCode SWIFT_WARN_UNUSED_RESULT;
- (void)setStatusCode:(NSInteger)statusCode;
- (NSTimeInterval)getDuration SWIFT_WARN_UNUSED_RESULT;
- (void)setDuration:(NSTimeInterval)duration;
- (BOOL)getSuccess SWIFT_WARN_UNUSED_RESULT;
- (void)setSuccess:(BOOL)success;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DTRHTTPMethod, "HTTPMethod", open) {
  DTRHTTPMethodGET = 0,
  DTRHTTPMethodHEAD = 1,
  DTRHTTPMethodPOST = 2,
  DTRHTTPMethodPUT = 3,
  DTRHTTPMethodDELETE = 4,
  DTRHTTPMethodCONNECT = 5,
  DTRHTTPMethodOPTIONS = 6,
  DTRHTTPMethodTRACE = 7,
  DTRHTTPMethodPATCH = 8,
};

@protocol DTRInAppMessageListener;
@protocol DTRInAppMessageAlertTapListener;
@protocol DTRInAppMessageAlertDeeplinkHandler;

SWIFT_PROTOCOL("_TtP11DataroidSDK19InAppClientProtocol_")
@protocol InAppClientProtocol
@property (nonatomic, strong) id <DTRInAppMessageListener> _Nullable inAppMessageListenerDelegate;
@property (nonatomic, strong) id <DTRInAppMessageAlertTapListener> _Nullable alertTapListenerDelegate;
@property (nonatomic, strong) id <DTRInAppMessageAlertDeeplinkHandler> _Nullable alertDeeplinkHandlerDelegate;
@end

/// Action type enum for in-app message actions
/// <ul>
///   <li>
///     dismiss: Just dismissing the alert
///   </li>
///   <li>
///     gotoUrl: Opening a url
///   </li>
///   <li>
///     gotoDeeplink: Opening a custom deeplink
///   </li>
///   <li>
///     copy: Copying the provided text
///   </li>
///   <li>
///     custom: Custom handling
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageActionType, "InAppMessageActionType", open) {
  DTRInAppMessageActionTypeDismiss = 0,
  DTRInAppMessageActionTypeGotoUrl = 1,
  DTRInAppMessageActionTypeGotoDeeplink = 2,
  DTRInAppMessageActionTypeCopy = 3,
  DTRInAppMessageActionTypeCustom = 4,
};


/// Interface for handling deeplinks for in-app mesages alerts
SWIFT_PROTOCOL_NAMED("InAppMessageAlertDeeplinkHandler")
@protocol DTRInAppMessageAlertDeeplinkHandler
/// Delegate method that will be invoked when a button deeplink action is implemented
/// \param deeplink String that identifies the deeplink
///
- (void)shouldHandleDeeplinkWithDeeplink:(NSString * _Nullable)deeplink;
@end

@class DTRInAppMessageButton;
@class DTRInAppMessageContent;
@class DTRInAppMessageCustomContent;

/// Interface for listening tap events on in-app message alerts
SWIFT_PROTOCOL_NAMED("InAppMessageAlertTapListener")
@protocol DTRInAppMessageAlertTapListener
@optional
/// Delegate method that will be invoked when a custom handled alert button tapped on in-app message alert
/// \param button Button that is tapped
///
/// \param content Related in-app message content
///
- (void)didTapAlertWithButton:(DTRInAppMessageButton * _Nonnull)button content:(DTRInAppMessageContent * _Nonnull)content;
/// Delegate method that will be invoked when a custom handled button tapped on custom in-app
/// \param button Button that is tapped
///
/// \param content Related in-app message content
///
- (void)didTapCustomButtonWithButton:(DTRInAppMessageButton * _Nonnull)button content:(DTRInAppMessageCustomContent * _Nonnull)content;
@end


SWIFT_CLASS_NAMED("InAppMessageAttributeCondition")
@interface DTRInAppMessageAttributeCondition : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull values;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageAvailabilityOption, "InAppMessageAvailabilityOption", open) {
  DTRInAppMessageAvailabilityOptionAvailableHours = 0,
  DTRInAppMessageAvailabilityOptionAnytime = 1,
};


SWIFT_CLASS_NAMED("InAppMessageButton")
@interface DTRInAppMessageButton : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable actionURI;
@property (nonatomic, readonly, copy) NSString * _Nullable buttonId;
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable textToCopy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageCappingRuleTimeUnit, "InAppMessageCappingRuleTimeUnit", open) {
  DTRInAppMessageCappingRuleTimeUnitDays = 0,
  DTRInAppMessageCappingRuleTimeUnitHours = 1,
  DTRInAppMessageCappingRuleTimeUnitMinutes = 2,
};


SWIFT_CLASS_NAMED("InAppMessageContent")
@interface DTRInAppMessageContent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) NSString * _Nullable language;
@property (nonatomic, readonly, copy) NSArray<DTRInAppMessageButton *> * _Nullable buttons;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum DTRInAppMessageLocation : NSInteger;

SWIFT_CLASS_NAMED("InAppMessageCustomContent")
@interface DTRInAppMessageCustomContent : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
@property (nonatomic, readonly) enum DTRInAppMessageLocation location;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageDisplayFrequency, "InAppMessageDisplayFrequency", open) {
  DTRInAppMessageDisplayFrequencyOncePerEvent = 0,
  DTRInAppMessageDisplayFrequencyOncePerSession = 1,
  DTRInAppMessageDisplayFrequencyEveryTime = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageHorizontalLocation, "InAppMessageHorizontalLocation", open) {
  DTRInAppMessageHorizontalLocationRight = 0,
  DTRInAppMessageHorizontalLocationCenter = 1,
  DTRInAppMessageHorizontalLocationLeft = 2,
};


/// Interface for the objects that listen received in-app messages
SWIFT_PROTOCOL_NAMED("InAppMessageListener")
@protocol DTRInAppMessageListener
@optional
/// Delegate method that will be invoked when in-app message received
/// \param content Content of the in-app message
///
- (void)didReceiveInAppMessageWithContent:(DTRInAppMessageContent * _Nonnull)content;
/// Delegate method that will be invoked when custom in-app message received
/// \param content Content of the custom in-app message
///
- (void)didReceiveCustomInAppMessageWithContent:(DTRInAppMessageCustomContent * _Nonnull)content;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageLocation, "InAppMessageLocation", open) {
  DTRInAppMessageLocationTop = 0,
  DTRInAppMessageLocationBottom = 1,
  DTRInAppMessageLocationFullScreen = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageScheduleDay, "InAppMessageScheduleDay", open) {
  DTRInAppMessageScheduleDaySunday = 1,
  DTRInAppMessageScheduleDayMonday = 2,
  DTRInAppMessageScheduleDayTuesday = 3,
  DTRInAppMessageScheduleDayWednesday = 4,
  DTRInAppMessageScheduleDayThursday = 5,
  DTRInAppMessageScheduleDayFriday = 6,
  DTRInAppMessageScheduleDaySaturday = 7,
};


SWIFT_CLASS("_TtC11DataroidSDK20InAppMessagingConfig")
@interface InAppMessagingConfig : NSObject
@property (nonatomic) BOOL enabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DTRPushEvent;

SWIFT_CLASS_NAMED("InboxMessage")
@interface DTRInboxMessage : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) int64_t invalidMessageId;)
+ (int64_t)invalidMessageId SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) int64_t id;
@property (nonatomic, readonly) enum DTRInboxMessageType type;
@property (nonatomic, readonly, copy) NSDate * _Nullable receivedDate;
@property (nonatomic, readonly, copy) NSDate * _Nullable expirationDate;
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
@property (nonatomic, readonly) enum DTRInboxMessageStatus status;
@property (nonatomic, readonly, strong) DTRPushEvent * _Nullable pushEvent;
@property (nonatomic, readonly, copy) NSString * _Nullable payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DTRInboxMessageStatus, "InboxMessageStatus", open) {
  DTRInboxMessageStatusUnread = 0,
  DTRInboxMessageStatusRead = 1,
  DTRInboxMessageStatusDismissed = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DTRInboxMessageType, "InboxMessageType", open) {
  DTRInboxMessageTypePush = 0,
  DTRInboxMessageTypeInApp = 1,
  DTRInboxMessageTypeGeofence = 2,
  DTRInboxMessageTypeActionBased = 3,
};



SWIFT_CLASS("_TtC11DataroidSDK15LocationFetcher")
@interface LocationFetcher : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class CLLocationManager;
@class CLLocation;

@interface LocationFetcher (SWIFT_EXTENSION(DataroidSDK)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end


enum DTRLoggerLevel : NSUInteger;

SWIFT_CLASS("_TtC11DataroidSDK12LoggerConfig")
@interface LoggerConfig : NSObject
@property (nonatomic) enum DTRLoggerLevel logLevel;
@property (nonatomic) BOOL writeToFile;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, DTRLoggerLevel, "LoggerLevel", open) {
  DTRLoggerLevelNone = 0,
  DTRLoggerLevelError = 1,
  DTRLoggerLevelWarning = 2,
  DTRLoggerLevelInfo = 3,
  DTRLoggerLevelDebug = 4,
  DTRLoggerLevelVerbose = 5,
};


SWIFT_CLASS_NAMED("LongPressTrackingAttributes")
@interface DTRLongPressTrackingAttributes : DTRTapTrackingAttributes
- (nonnull instancetype)initWithTouchPoint:(DTRTouchPoint * _Nonnull)touchPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, DTRModuleTag, "ModuleTag", open) {
  DTRModuleTagActionBased = 0,
  DTRModuleTagAnalytics = 1,
  DTRModuleTagApm = 2,
  DTRModuleTagAppInbox = 3,
  DTRModuleTagBackoff = 4,
  DTRModuleTagCore = 5,
  DTRModuleTagDb = 6,
  DTRModuleTagDeeplink = 7,
  DTRModuleTagEventLimit = 8,
  DTRModuleTagEvent = 9,
  DTRModuleTagGoal = 10,
  DTRModuleTagInApp = 11,
  DTRModuleTagRemoteConfig = 12,
  DTRModuleTagScreenTracking = 13,
  DTRModuleTagSuperAttribute = 14,
  DTRModuleTagGeolocation = 15,
  DTRModuleTagSnapshot = 16,
  DTRModuleTagGeofence = 17,
  DTRModuleTagCrash = 18,
  DTRModuleTagWebBridge = 19,
  DTRModuleTagContextTrigger = 20,
  DTRModuleTagIdAllocation = 21,
};


SWIFT_CLASS_NAMED("MutableHttpCallAttributes")
@interface DTRMutableHttpCallAttributes : NSObject
/// Type of error
@property (nonatomic, copy) NSString * _Nullable errorType;
/// Error code
@property (nonatomic, copy) NSString * _Nullable errorCode;
/// Error message
@property (nonatomic, copy) NSString * _Nullable errorMessage;
/// Object that holds custom attributes
@property (nonatomic, strong) DTRAPMAttributes * _Nullable attributes;
- (void)setSuccess:(BOOL)isSuccess;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("MutableNetworkErrorAttributes")
@interface DTRMutableNetworkErrorAttributes : NSObject
/// Custom message
@property (nonatomic, copy) NSString * _Nullable message;
/// Object that holds custom attributes
@property (nonatomic, strong) DTRAPMAttributes * _Nullable attributes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end










SWIFT_CLASS("_TtC11DataroidSDK13NetworkConfig")
@interface NetworkConfig : NSObject
@property (nonatomic, copy) NSArray<DTRTrustPolicy *> * _Nullable trustPolicies;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DTRNetworkErrorType;

/// Object that holds network errors and relevant properties
/// for the purpose of sending to server
SWIFT_CLASS_NAMED("NetworkErrorAttributes")
@interface DTRNetworkErrorAttributes : NSObject
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable headers;
@property (nonatomic, strong) DTRNetworkErrorType * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable exception;
@property (nonatomic, copy) NSString * _Nullable message;
/// Object that holds custom attributes
@property (nonatomic, strong) DTRAPMAttributes * _Nullable attributes;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url method:(enum DTRHTTPMethod)method duration:(NSTimeInterval)duration type:(DTRNetworkErrorType * _Nonnull)type exception:(NSString * _Nonnull)exception;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Network error types
SWIFT_CLASS_NAMED("ErrorType")
@interface DTRNetworkErrorType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkErrorType * _Nonnull unknown;)
+ (DTRNetworkErrorType * _Nonnull)unknown SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkErrorType * _Nonnull noConnection;)
+ (DTRNetworkErrorType * _Nonnull)noConnection SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkErrorType * _Nonnull ssl;)
+ (DTRNetworkErrorType * _Nonnull)ssl SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkErrorType * _Nonnull timeout;)
+ (DTRNetworkErrorType * _Nonnull)timeout SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkErrorType * _Nonnull insecureConnection;)
+ (DTRNetworkErrorType * _Nonnull)insecureConnection SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger rawValue;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)formUnion:(DTRNetworkErrorType * _Nonnull)other;
- (void)formIntersection:(DTRNetworkErrorType * _Nonnull)other;
- (void)formSymmetricDifference:(DTRNetworkErrorType * _Nonnull)other;
/// Initialize network record object
/// \param error Error object
///
- (nullable instancetype)initWithError:(NSError * _Nonnull)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_UNAVAILABLE
@interface DTRNetworkErrorAttributes (SWIFT_EXTENSION(DataroidSDK))
- (enum DTRHTTPMethod)getMethod SWIFT_WARN_UNUSED_RESULT;
- (void)setMethod:(enum DTRHTTPMethod)method;
- (NSTimeInterval)getDuration SWIFT_WARN_UNUSED_RESULT;
- (void)setDuration:(NSTimeInterval)duration;
@end

/// Action type enum for notification actions
/// <ul>
///   <li>
///     none: No action
///   </li>
///   <li>
///     openApp: Opening the application
///   </li>
///   <li>
///     gotoUrl: Opening a url
///   </li>
///   <li>
///     gotoDeeplink: Opening a custom deeplink
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, DTRNotificationActionType, "NotificationActionType", open) {
  DTRNotificationActionTypeNone = 0,
  DTRNotificationActionTypeOpenApp = 1,
  DTRNotificationActionTypeGotoUrl = 2,
  DTRNotificationActionTypeGotoDeeplink = 3,
};


SWIFT_CLASS("_TtC11DataroidSDK18NotificationConfig")
@interface NotificationConfig : NSObject
@property (nonatomic) BOOL enableSwizzling;
@property (nonatomic) BOOL openUrlsAutomatically;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Product model for commerce events
SWIFT_CLASS_NAMED("Product")
@interface DTRProduct : NSObject
/// Product identifier
@property (nonatomic, copy) NSString * _Nonnull id;
/// Product name
@property (nonatomic, copy) NSString * _Nonnull name;
/// Product’s description
@property (nonatomic, copy) NSString * _Nullable productDescription;
/// Brand of product
@property (nonatomic, copy) NSString * _Nullable brand;
/// Product quantity
@property (nonatomic) NSInteger quantity;
/// Price of product
@property (nonatomic) NSDecimal price;
/// Variant of product
@property (nonatomic, copy) NSString * _Nullable variant;
/// Product category
@property (nonatomic, copy) NSString * _Nullable category;
/// Currency for product’s price
@property (nonatomic, copy) NSString * _Nonnull currency;
- (nullable instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name quantity:(NSInteger)quantity price:(NSDecimal)price currency:(NSString * _Nonnull)currency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Event attributes for event that user completes a purchase.
/// Trigger this event when user completes a purchase.
/// Implementing a Purchase event allows you to see your revenue in real-time,
/// understand how many users are making purchases,
/// see which items are most popular,
/// and track plenty of other important purchase-related metrics.
SWIFT_CLASS_NAMED("PurchaseEventAttributes")
@interface DTRPurchaseEventAttributes : DTRAttributes
- (nonnull instancetype)initWithCurrency:(NSString * _Nonnull)currency value:(NSDecimal)value products:(NSArray<DTRProduct *> * _Nullable)products success:(BOOL)success OBJC_DESIGNATED_INITIALIZER;
/// Add tax value attribute to event
/// \param tax Tax applied at purchase
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addTax:(NSDecimal)tax;
/// Adds ship attribute to event
/// \param ship Ship of purchase
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addShip:(NSDecimal)ship;
/// Adds discount value attribute to event
/// \param discount Discount applied at purchase
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addDiscount:(NSDecimal)discount;
/// Adds coupon attribute to event
/// \param coupon Coupon that used at the purchase action
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addCoupon:(NSString * _Nonnull)coupon;
/// Adds transaction referance attribute to event
/// \param trxId Transaction referance
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addTrxId:(NSString * _Nonnull)trxId;
/// Adds payment method attribute to event
/// \param paymentMethod Payment method used at purchase
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addPaymentMethod:(NSString * _Nonnull)paymentMethod;
/// Adds quantity attribute to event
/// \param quantity Quantity of items are purchased
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addQuantity:(NSInteger)quantity;
/// Adds error code attribute to event
/// \param errorCode Error code obtained from purchase action
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addErrorCode:(NSString * _Nonnull)errorCode;
/// Adds error message attribute to event
/// \param errorMessage Error message obtained from purchase action
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addErrorMessage:(NSString * _Nonnull)errorMessage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("PushEvent")
@interface DTRPushEvent : NSObject
@property (nonatomic, readonly) enum DTRNotificationActionType notificationAction;
@property (nonatomic, readonly, copy) NSString * _Nullable soundName;
@property (nonatomic, readonly, copy) NSString * _Nullable pushID;
@property (nonatomic, readonly, copy) NSString * _Nullable scheduleID;
@property (nonatomic, readonly, copy) NSString * _Nullable eventID;
@property (nonatomic, readonly, copy) NSURL * _Nullable mediaURL;
@property (nonatomic, readonly, copy) NSURL * _Nullable targetURL;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
@property (nonatomic, readonly, copy) NSString * _Nullable conversionRules;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






SWIFT_CLASS_NAMED("PushEventManager")
@interface DTRPushEventManager : NSObject
@property (nonatomic, readonly, strong) DTRPushEvent * _Nullable latestPushEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Attributes for that removing item from cart.
/// Trigger this event when user removes item(s) from cart.
/// Implementing a Remove from Cart event allows you to understand how many users remove item(s)
/// from cart and what items are tend to be abandoned through checkout process.
SWIFT_CLASS_NAMED("RemoveFromCartEventAttributes")
@interface DTRRemoveFromCartEventAttributes : DTRAttributes
- (nonnull instancetype)initWithProduct:(DTRProduct * _Nonnull)product OBJC_DESIGNATED_INITIALIZER;
/// Adds a value attribute to event
/// \param value Value of product
///
///
/// returns:
/// Event builder’s itself
- (DTRRemoveFromCartEventAttributes * _Nonnull)addValue:(NSDecimal)value;
/// Adds total cart value attribute to event
/// \param totalCartValue Total cart value
///
///
/// returns:
/// Event builder’s itself
- (DTRRemoveFromCartEventAttributes * _Nonnull)addTotalCartValue:(NSDecimal)totalCartValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("RemoveFromWishListEventAttributes")
@interface DTRRemoveFromWishListEventAttributes : DTRAttributes
- (nonnull instancetype)initWithProduct:(DTRProduct * _Nonnull)product OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DTRSwipeTrackingAttributes;

SWIFT_PROTOCOL("_TtP11DataroidSDK31ScreenInteractionClientProtocol_")
@protocol ScreenInteractionClientProtocol
- (void)collectTouch:(DTRTapTrackingAttributes * _Nonnull)attributes;
- (void)collectSwipe:(DTRSwipeTrackingAttributes * _Nonnull)attributes;
- (void)collectLongPress:(DTRLongPressTrackingAttributes * _Nonnull)attributes;
- (void)collectDoubleTap:(DTRDoubleTapTrackingAttributes * _Nonnull)attributes;
@end


SWIFT_CLASS("_TtC11DataroidSDK23ScreenInteractionConfig")
@interface ScreenInteractionConfig : NSObject
@property (nonatomic) BOOL autoCollectingEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DTRViewTrackingExtras;

/// Interface for screen tracking related operations
SWIFT_PROTOCOL_NAMED("ScreenTracker")
@protocol DTRScreenTracker
/// Starts tracking for view
/// \param view View that will be tracked
///
/// \param name Tracking name for the view
///
- (void)startTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name;
/// Starts tracking for view
/// \param view View that will be tracked
///
/// \param name Tracking name for the view
///
/// \param extras Extra attributes for tracking event
///
- (void)startTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name extras:(DTRViewTrackingExtras * _Nullable)extras;
/// Starts tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
- (void)startTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name;
/// Starts tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
/// \param extras Extra attributes for tracking event
///
- (void)startTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name extras:(DTRViewTrackingExtras * _Nullable)extras;
/// Stops tracking for view
/// \param view View that is being tracked
///
/// \param name Tracking name for the view
///
- (void)stopTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name;
/// Stops tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
- (void)stopTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name;
@end


SWIFT_PROTOCOL("_TtP11DataroidSDK28ScreenTrackingClientProtocol_")
@protocol ScreenTrackingClientProtocol
- (void)viewStartWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name;
- (void)viewStartWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name extras:(DTRViewTrackingExtras * _Nonnull)extras;
- (void)viewStartWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name;
- (void)viewStartWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name extras:(DTRViewTrackingExtras * _Nonnull)extras;
- (void)viewStopWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name;
- (void)viewStopWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name;
@end


SWIFT_CLASS("_TtC11DataroidSDK20ScreenTrackingConfig")
@interface ScreenTrackingConfig : NSObject
@property (nonatomic) BOOL enabled;
@property (nonatomic) BOOL autoCollectingEnabled;
@property (nonatomic) BOOL shouldTrackInnerViewController;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull viewControllerExclusions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Event attributes for event that search action,
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS_NAMED("SearchEventAttributes")
@interface DTRSearchEventAttributes : DTRAttributes
/// Initializes search event attributes
/// \param query Search query
///
- (nonnull instancetype)initWithQuery:(NSString * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Event builder for event that search action,
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS("_TtC11DataroidSDK18SearchEventBuilder")
@interface SearchEventBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11DataroidSDK13SessionConfig")
@interface SessionConfig : NSObject
@property (nonatomic) NSTimeInterval timeout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DataroidSDK14SnapshotConfig")
@interface SnapshotConfig : NSObject
@property (nonatomic) BOOL enabled;
@property (nonatomic) NSInteger latencyInMillis;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable enabledBundleIDs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Event attributes for event that search action,
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS_NAMED("StartCheckoutEventAttributes")
@interface DTRStartCheckoutEventAttributes : DTRAttributes
- (nonnull instancetype)initWithValue:(NSDecimal)value currency:(NSString * _Nonnull)currency OBJC_DESIGNATED_INITIALIZER;
/// Adds quantity attribute to event
/// \param quantity Quantity of checkout items
///
///
/// returns:
/// Event builder’s itself
- (DTRStartCheckoutEventAttributes * _Nonnull)addQuantity:(NSInteger)quantity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("SwipeTrackingAttributes")
@interface DTRSwipeTrackingAttributes : DTRUIEventTrackingAttributes
/// Initialize SwipeTrackingAttributes
/// \param startPoint startPoint
///
/// \param endPoint endPoint
///
/// \param viewLabel viewLabel for touch’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for touch’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithStartPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end

@class UISwitch;

SWIFT_CLASS_NAMED("SwitchButtonTrackingAttributes")
@interface DTRSwitchButtonTrackingAttributes : DTRUIEventTrackingAttributes
/// Initialize SwitchButtonTrackingAttributes
/// \param button switchButton to track
///
- (nonnull instancetype)initWithSwitchButton:(UISwitch * _Nonnull)switchButton OBJC_DESIGNATED_INITIALIZER;
/// Initialize SwitchButtonTrackingAttributes
/// \param className className for button (e.g. “UISwitch”)
///
/// \param isChecked isChecked for button (e.g. button.isOn)
///
/// \param accessibilityLabel accessibilityLabel for button
///
/// \param componentId componentId for button
///
/// \param coordinates coordinates for button. (e.g. button.frame)
///
/// \param viewLabel viewLabel for button’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for button’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithClassName:(NSString * _Nonnull)className isChecked:(BOOL)isChecked accessibilityLabel:(NSString * _Nullable)accessibilityLabel componentId:(NSString * _Nullable)componentId coordinates:(DTRUIViewPixelCoordinate * _Nullable)coordinates viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end


@class UITextField;

SWIFT_CLASS_NAMED("TextFieldTrackingAttributes")
@interface DTRTextFieldTrackingAttributes : DTRUIEventTrackingAttributes
/// Initialize TextFieldTrackingAttributes
/// \param textField textField to track
///
- (nonnull instancetype)initWithTextField:(UITextField * _Nonnull)textField OBJC_DESIGNATED_INITIALIZER;
/// Initialize TextFieldTrackingAttributes
/// \param className className for textField (e.g. “UITextField”)
///
/// \param value value for textField
///
/// \param placeholder placeholder for textField
///
/// \param accessibilityLabel accessibilityLabel for textField
///
/// \param componentId componentId for textField
///
/// \param coordinates coordinates for textField. (e.g. textField.frame)
///
/// \param viewLabel viewLabel for textField’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for textField’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithClassName:(NSString * _Nonnull)className value:(NSString * _Nonnull)value placeholder:(NSString * _Nullable)placeholder accessibilityLabel:(NSString * _Nullable)accessibilityLabel componentId:(NSString * _Nullable)componentId coordinates:(DTRUIViewPixelCoordinate * _Nullable)coordinates viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("TouchPoint")
@interface DTRTouchPoint : NSObject
- (nonnull instancetype)initWithPoint:(CGPoint)point OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11DataroidSDK16TriggeredContext")
@interface TriggeredContext : NSObject
@property (nonatomic, copy) NSString * _Nonnull contextTriggerId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nonnull instancetype)initWithContextTriggerId:(NSString * _Nonnull)contextTriggerId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithContextTriggerId:(NSString * _Nonnull)contextTriggerId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface UIBarButtonItem (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_containsSensitiveObject;
@end


@interface UIBarButtonItem (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_isDebounceThresholdExclusion;
@end


@interface UIButton (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_containsSensitiveObject;
@end


@interface UIButton (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_isDebounceThresholdExclusion;
@end





@interface UISwitch (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_containsSensitiveObject;
@end


@interface UITextField (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_containsSensitiveObject;
@end



@interface UITextView (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_containsSensitiveObject;
@end







SWIFT_CLASS_NAMED("UIViewPixelCoordinate")
@interface DTRUIViewPixelCoordinate : NSObject
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DTRUIViewPixelCoordinate (SWIFT_EXTENSION(DataroidSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end






@interface UNNotificationContent (SWIFT_EXTENSION(DataroidSDK))
/// Checks if the payload belongs to Dataroid
@property (nonatomic, readonly) BOOL isFromDataroid;
/// Checks if the given sdk key matches with push notification payload
- (BOOL)isMatchesWith:(NSString * _Nonnull)sdkKey SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("UserAttributes")
@interface DTRUserAttributes : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull collections;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface DTRUserAttributes (SWIFT_EXTENSION(DataroidSDK))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
@end



@class UNMutableNotificationContent;

SWIFT_CLASS("_TtC11DataroidSDK26UserNotificationIntegrator")
@interface UserNotificationIntegrator : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull languageCode;
@property (nonatomic, readonly, strong) DTRAppInbox * _Nullable inbox;
+ (UserNotificationIntegrator * _Nullable)initializeWithConfig:(DataroidConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (void)processWithContent:(UNMutableNotificationContent * _Nonnull)content completion:(void (^ _Nonnull)(UNMutableNotificationContent * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






/// Event attributes for event that user lists items within a specific category.
SWIFT_CLASS_NAMED("ViewCategoryEventAttributes")
@interface DTRViewCategoryEventAttributes : DTRAttributes
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Event attributes for event that whenever a single product is displayed.
SWIFT_CLASS_NAMED("ViewProductEventAttributes")
@interface DTRViewProductEventAttributes : DTRAttributes
- (nonnull instancetype)initWithProduct:(DTRProduct * _Nonnull)product OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ViewTrackingExtras")
@interface DTRViewTrackingExtras : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface DTRViewTrackingExtras (SWIFT_EXTENSION(DataroidSDK))
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end


@interface DTRViewTrackingExtras (SWIFT_EXTENSION(DataroidSDK))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
@end




#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef DATAROIDSDK_SWIFT_H
#define DATAROIDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DataroidSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS_NAMED("APMAttributes")
@interface DTRAPMAttributes : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
@class NSDate;

@interface DTRAPMAttributes (SWIFT_EXTENSION(DataroidSDK))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end

@protocol DTRAutoCollectionApmListener;
@class DTRHTTPCallAttributes;
@class DTRNetworkErrorAttributes;

SWIFT_PROTOCOL("_TtP11DataroidSDK17APMClientProtocol_")
@protocol APMClientProtocol
@property (nonatomic, strong) id <DTRAutoCollectionApmListener> _Nullable delegate;
- (void)collectHTTPCall:(DTRHTTPCallAttributes * _Nonnull)attributes;
- (void)collectNetworkError:(DTRNetworkErrorAttributes * _Nonnull)attributes;
@end


SWIFT_CLASS("_TtC11DataroidSDK9APMConfig")
@interface APMConfig : NSObject
@property (nonatomic) BOOL enabled;
@property (nonatomic) BOOL autoCollectingEnabled;
@property (nonatomic) NSInteger storageLimit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("Attributes")
@interface DTRAttributes : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DTRProduct;

SWIFT_CLASS_NAMED("AddToCardEventAttributes")
@interface DTRAddToCardEventAttributes : DTRAttributes
- (nonnull instancetype)initWithProduct:(DTRProduct * _Nonnull)product OBJC_DESIGNATED_INITIALIZER;
- (DTRAddToCardEventAttributes * _Nonnull)addValue:(NSDecimal)value;
- (DTRAddToCardEventAttributes * _Nonnull)addTotalCartValue:(NSDecimal)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("AddToWishListEventAttributes")
@interface DTRAddToWishListEventAttributes : DTRAttributes
- (nonnull instancetype)initWithProduct:(DTRProduct * _Nonnull)product OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol DTRAppInboxDelegate;
@class DTRInboxMessage;
@class DTRAppInboxQuery;

SWIFT_CLASS_NAMED("AppInbox")
@interface DTRAppInbox : NSObject
/// App Inbox delegate
@property (nonatomic, weak) id <DTRAppInboxDelegate> _Nullable delegate;
/// Fetchs stored inbox messages from database
- (NSArray<DTRInboxMessage *> * _Nullable)fetchMessages SWIFT_WARN_UNUSED_RESULT;
/// Fetchs stored inbox messages from database with query
/// \param query Query for messages
///
- (NSArray<DTRInboxMessage *> * _Nullable)fetchMessagesWithQuery:(DTRAppInboxQuery * _Nullable)query SWIFT_WARN_UNUSED_RESULT;
/// Deletes inbox messages from database
/// \param ids Message identifiers
///
- (BOOL)deleteMessagesWithIds:(NSArray<NSNumber *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Reads inbox messages from database
/// \param ids Message identifiers
///
- (BOOL)readMessagesWithIds:(NSArray<NSNumber *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_PROTOCOL("_TtP11DataroidSDK22AppInboxClientProtocol_")
@protocol AppInboxClientProtocol
@property (nonatomic, strong) id <DTRAppInboxDelegate> _Nullable delegate;
- (NSArray<DTRInboxMessage *> * _Nullable)fetchMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray<DTRInboxMessage *> * _Nullable)fetchMessagesWithQuery:(DTRAppInboxQuery * _Nullable)query SWIFT_WARN_UNUSED_RESULT;
- (BOOL)deleteMessagesWithIds:(NSArray<NSNumber *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
- (BOOL)readMessagesWithIds:(NSArray<NSNumber *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11DataroidSDK14AppInboxConfig")
@interface AppInboxConfig : NSObject
@property (nonatomic) BOOL enabled;
@property (nonatomic) NSInteger storageLimit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Interface for handling inbox events
SWIFT_PROTOCOL_NAMED("AppInboxDelegate")
@protocol DTRAppInboxDelegate
/// Called when a message is updated
/// \param inbox App inbox
///
/// \param message Updated message
///
- (void)inbox:(DTRAppInbox * _Nonnull)inbox didUpdate:(DTRInboxMessage * _Nonnull)message;
/// Called when messages are removed from inbox
/// \param inbox App Inbox
///
/// \param ids Removed message identifiers
///
- (void)inbox:(DTRAppInbox * _Nonnull)inbox didDeleteMessages:(NSArray<NSNumber *> * _Nonnull)ids;
@end

enum DTRInboxMessageType : NSInteger;
enum DTRInboxMessageStatus : NSInteger;

SWIFT_CLASS_NAMED("AppInboxQuery")
@interface DTRAppInboxQuery : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (DTRAppInboxQuery * _Nonnull)messageType:(enum DTRInboxMessageType)messageType SWIFT_WARN_UNUSED_RESULT;
- (DTRAppInboxQuery * _Nonnull)status:(enum DTRInboxMessageStatus)status SWIFT_WARN_UNUSED_RESULT;
- (DTRAppInboxQuery * _Nonnull)from:(NSDate * _Nonnull)from SWIFT_WARN_UNUSED_RESULT;
- (DTRAppInboxQuery * _Nonnull)to:(NSDate * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
- (DTRAppInboxQuery * _Nonnull)anonymous:(BOOL)anonymous SWIFT_WARN_UNUSED_RESULT;
@end

@class NSData;
@class UNNotificationResponse;

SWIFT_CLASS_NAMED("ApplicationListener")
@interface DTRAppListener : NSObject
- (void)didFinishLaunchingWith:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
- (void)didRegisterForRemoteNotificationsWith:(NSData * _Nonnull)deviceToken;
- (void)userNotificationCenterDidReceive:(UNNotificationResponse * _Nonnull)response;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSNumber;

@interface DTRAttributes (SWIFT_EXTENSION(DataroidSDK))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addNumber:(NSNumber * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end

@class DTRMutableHttpCallAttributes;
@class DTRMutableNetworkErrorAttributes;

SWIFT_PROTOCOL_NAMED("AutoCollectingApmListener")
@protocol DTRAutoCollectionApmListener
@optional
- (DTRMutableHttpCallAttributes * _Nonnull)willCollectHttpCallWithAttributes:(DTRHTTPCallAttributes * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
- (DTRMutableNetworkErrorAttributes * _Nonnull)willCollectNetworkErrorWithAttributes:(DTRNetworkErrorAttributes * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS_NAMED("UIEventTrackingAttributes")
@interface DTRUIEventTrackingAttributes : NSObject
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIButton;
@class DTRUIViewPixelCoordinate;

SWIFT_CLASS_NAMED("ButtonTrackingAttributes")
@interface DTRButtonTrackingAttributes : DTRUIEventTrackingAttributes
/// Initialize ButtonTrackingAttributes
/// \param button button to track
///
- (nonnull instancetype)initWithButton:(UIButton * _Nonnull)button OBJC_DESIGNATED_INITIALIZER;
/// Initialize ButtonTrackingAttributes
/// \param className className for button (e.g. “UIButton”)
///
/// \param label label for button (e.g. button.title)
///
/// \param accessibilityLabel accessibilityLabel for button
///
/// \param componentId componentId for button
///
/// \param coordinates coordinates for button. (e.g. button.frame)
///
/// \param viewLabel viewLabel for button’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for button’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithClassName:(NSString * _Nonnull)className label:(NSString * _Nullable)label accessibilityLabel:(NSString * _Nullable)accessibilityLabel componentId:(NSString * _Nullable)componentId coordinates:(DTRUIViewPixelCoordinate * _Nullable)coordinates viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end

@class DTRCertificateFile;

SWIFT_CLASS_NAMED("Certificate")
@interface DTRCertificate : NSObject
+ (DTRCertificate * _Nonnull)file:(DTRCertificateFile * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
+ (DTRCertificate * _Nonnull)base64:(NSString * _Nonnull)encodedString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSBundle;

SWIFT_CLASS_NAMED("CertificateFile")
@interface DTRCertificateFile : NSObject
- (nonnull instancetype)initWithBundle:(NSBundle * _Nonnull)bundle fileName:(NSString * _Nonnull)fileName fileExtension:(NSString * _Nonnull)fileExtension OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ClearCartEventAttributes")
@interface DTRClearCartEventAttributes : DTRAttributes
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DTRPurchaseEventAttributes;
@class DTRSearchEventAttributes;
@class DTRViewProductEventAttributes;
@class DTRViewCategoryEventAttributes;
@class DTRRemoveFromCartEventAttributes;
@class DTRStartCheckoutEventAttributes;
@class DTRRemoveFromWishListEventAttributes;

SWIFT_PROTOCOL("_TtP11DataroidSDK22CommerceClientProtocol_")
@protocol CommerceClientProtocol
- (void)collectPurchase:(DTRPurchaseEventAttributes * _Nonnull)attributes;
- (void)collectSearch:(DTRSearchEventAttributes * _Nonnull)attributes;
- (void)collectViewProduct:(DTRViewProductEventAttributes * _Nonnull)attributes;
- (void)collectViewCategory:(DTRViewCategoryEventAttributes * _Nonnull)attributes;
- (void)collectAddToCard:(DTRAddToCardEventAttributes * _Nonnull)attributes;
- (void)collectRemoveFromCart:(DTRRemoveFromCartEventAttributes * _Nonnull)attributes;
- (void)collectClearCart:(DTRClearCartEventAttributes * _Nonnull)attributes;
- (void)collectStartCheckout:(DTRStartCheckoutEventAttributes * _Nonnull)attributes;
- (void)collectAddToWishList:(DTRAddToWishListEventAttributes * _Nonnull)attributes;
- (void)collectRemoveFromWishList:(DTRRemoveFromWishListEventAttributes * _Nonnull)attributes;
@end

@class DTRTextFieldTrackingAttributes;
@class DTRSwitchButtonTrackingAttributes;

SWIFT_PROTOCOL("_TtP11DataroidSDK34ComponentInteractionClientProtocol_")
@protocol ComponentInteractionClientProtocol
- (void)collectButtonClick:(DTRButtonTrackingAttributes * _Nonnull)attributes;
- (void)collectTextChange:(DTRTextFieldTrackingAttributes * _Nonnull)attributes;
- (void)collectToggleChange:(DTRSwitchButtonTrackingAttributes * _Nonnull)attributes;
@end


SWIFT_CLASS("_TtC11DataroidSDK26ComponentInteractionConfig")
@interface ComponentInteractionConfig : NSObject
@property (nonatomic) BOOL autoCollectingEnabled;
@property (nonatomic) NSInteger debounceThreshold;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ConnectionType")
@interface DTRNetworkConnectionType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull none;)
+ (DTRNetworkConnectionType * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull cellular;)
+ (DTRNetworkConnectionType * _Nonnull)cellular SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull wifi;)
+ (DTRNetworkConnectionType * _Nonnull)wifi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull ethernet;)
+ (DTRNetworkConnectionType * _Nonnull)ethernet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull bluetooth;)
+ (DTRNetworkConnectionType * _Nonnull)bluetooth SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull wifiAware;)
+ (DTRNetworkConnectionType * _Nonnull)wifiAware SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull loWpan;)
+ (DTRNetworkConnectionType * _Nonnull)loWpan SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkConnectionType * _Nonnull vpn;)
+ (DTRNetworkConnectionType * _Nonnull)vpn SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger rawValue;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)formUnion:(DTRNetworkConnectionType * _Nonnull)other;
- (void)formIntersection:(DTRNetworkConnectionType * _Nonnull)other;
- (void)formSymmetricDifference:(DTRNetworkConnectionType * _Nonnull)other;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@class TriggeredContext;

SWIFT_PROTOCOL("_TtP11DataroidSDK30ContextTriggerListenerDelegate_")
@protocol ContextTriggerListenerDelegate
- (void)contextTriggeredWithContext:(TriggeredContext * _Nonnull)context;
@end

@class NSError;
@class NSException;

SWIFT_PROTOCOL("_TtP11DataroidSDK28CrashReportingClientProtocol_")
@protocol CrashReportingClientProtocol
- (void)collectError:(NSError * _Nonnull)error stacktrace:(NSArray<NSString *> * _Nonnull)stacktrace;
- (void)collectException:(NSException * _Nonnull)exception stacktrace:(NSArray<NSString *> * _Nonnull)stacktrace;
@end


SWIFT_CLASS("_TtC11DataroidSDK20CrashReportingConfig")
@interface CrashReportingConfig : NSObject
@property (nonatomic) BOOL autoCollectingEnabled;
@property (nonatomic) NSInteger storageLimit;
@property (nonatomic) BOOL threadCollection;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull exceptionExclusions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11DataroidSDK25CustomEventClientProtocol_")
@protocol CustomEventClientProtocol
- (void)collectEventWithName:(NSString * _Nonnull)name attributes:(DTRAttributes * _Nonnull)attributes;
- (void)collectEventWithName:(NSString * _Nonnull)name;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("DBAPMRecord")
@interface DBAPMRecord : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




@interface DBAPMRecord (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBActionBased")
@interface DBActionBased : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




@interface DBActionBased (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic, copy) NSDate * _Nullable date;
@property (nonatomic) BOOL delivered;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable parentId;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBEvent")
@interface DBEvent : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




@interface DBEvent (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) int64_t id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBGeofence")
@interface DBGeofence : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBGeofence (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBGoal")
@interface DBGoal : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




@interface DBGoal (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic, copy) NSString * _Nullable eventName;
@property (nonatomic, copy) NSDate * _Nullable expDate;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBInboxMessage")
@interface DBInboxMessage : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




@interface DBInboxMessage (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic, copy) NSString * _Nullable customerId;
@property (nonatomic, copy) NSDate * _Nullable expirationDate;
@property (nonatomic) int64_t id;
@property (nonatomic, copy) NSString * _Nullable payload;
@property (nonatomic, copy) NSString * _Nullable pushId;
@property (nonatomic, copy) NSDate * _Nullable receivedDate;
@property (nonatomic, copy) NSString * _Nullable scheduleId;
@property (nonatomic) int16_t status;
@property (nonatomic) int16_t type;
@end


SWIFT_CLASS_NAMED("DBSession")
@interface DBSession : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBSession (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end

@class NSURLSessionTask;
@class NSURL;

SWIFT_CLASS("_TtC11DataroidSDK22DTRURLSessionCollector")
@interface DTRURLSessionCollector : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRURLSessionCollector * _Nonnull shared;)
+ (DTRURLSessionCollector * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)startTrackingWithTask:(NSURLSessionTask * _Nonnull)task;
- (void)endTrackingWithTask:(NSURLSessionTask * _Nullable)task data:(NSData * _Nullable)data;
- (void)endTrackingWithUrl:(NSURL * _Nonnull)url data:(NSData * _Nullable)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC11DataroidSDK14DatabaseConfig")
@interface DatabaseConfig : NSObject
@property (nonatomic) BOOL resetDatabase;
- (nonnull instancetype)initWithDatabaseEncryptionKey:(NSArray<NSNumber *> * _Nullable)databaseEncryptionKey databaseEncryptionEnabled:(BOOL)databaseEncryptionEnabled OBJC_DESIGNATED_INITIALIZER;
- (void)migrateToRawKeyFrom:(NSString * _Nonnull)previousDatabaseEncryptionKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class DataroidConfig;
@class DTRPushEventManager;
@protocol GeolocationClientProtocol;
@protocol InAppClientProtocol;
@protocol ScreenTrackingClientProtocol;
@protocol ScreenInteractionClientProtocol;

SWIFT_CLASS("_TtC11DataroidSDK8Dataroid")
@interface Dataroid : NSObject
@property (nonatomic, weak) id <ContextTriggerListenerDelegate> _Nullable contextTriggerListenerDelegate;
@property (nonatomic, readonly, strong) DataroidConfig * _Nonnull config;
@property (nonatomic, readonly, strong) DTRPushEventManager * _Nonnull pushEventManager;
@property (nonatomic, readonly, strong) id <GeolocationClientProtocol> _Nonnull geolocation;
@property (nonatomic, readonly, strong) id <CommerceClientProtocol> _Nonnull commerce;
@property (nonatomic, readonly, strong) id <APMClientProtocol> _Nonnull apm;
@property (nonatomic, readonly, strong) id <InAppClientProtocol> _Nonnull inApp;
@property (nonatomic, readonly, strong) id <ScreenTrackingClientProtocol> _Nonnull screenTracking;
@property (nonatomic, readonly, strong) id <AppInboxClientProtocol> _Nullable appInbox;
@property (nonatomic, readonly, strong) id <ComponentInteractionClientProtocol> _Nonnull componentInteraction;
@property (nonatomic, readonly, strong) id <ScreenInteractionClientProtocol> _Nonnull screenInteraction;
@property (nonatomic, readonly, strong) DTRAppListener * _Nonnull appListener;
+ (Dataroid * _Nullable)initializeWithConfig:(DataroidConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)pauseEventCollection;
- (void)resumeEventCollection;
@end



@class WKWebView;

SWIFT_PROTOCOL("_TtP11DataroidSDK23WebBridgeClientProtocol_")
@protocol WebBridgeClientProtocol
- (void)trackWebView:(WKWebView * _Nonnull)webView;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <WebBridgeClientProtocol>
- (void)trackWebView:(WKWebView * _Nonnull)webView;
@end


SWIFT_PROTOCOL("_TtP11DataroidSDK22LanguageClientProtocol_")
@protocol LanguageClientProtocol
- (void)updateLanguage:(NSString * _Nonnull)languageCode;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <LanguageClientProtocol>
- (void)updateLanguage:(NSString * _Nonnull)languageCode;
@end

@class DTRDeeplinkAttributes;

SWIFT_PROTOCOL("_TtP11DataroidSDK22DeeplinkClientProtocol_")
@protocol DeeplinkClientProtocol
- (void)collectDeeplink:(DTRDeeplinkAttributes * _Nonnull)attributes;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <DeeplinkClientProtocol>
- (void)collectDeeplink:(DTRDeeplinkAttributes * _Nonnull)attributes;
@end




@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <CustomEventClientProtocol>
- (void)collectEventWithName:(NSString * _Nonnull)name attributes:(DTRAttributes * _Nonnull)attributes;
- (void)collectEventWithName:(NSString * _Nonnull)name;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <CrashReportingClientProtocol>
- (void)collectError:(NSError * _Nonnull)error stacktrace:(NSArray<NSString *> * _Nonnull)stacktrace;
- (void)collectException:(NSException * _Nonnull)exception stacktrace:(NSArray<NSString *> * _Nonnull)stacktrace;
@end

@class DataroidUser;

SWIFT_PROTOCOL("_TtP11DataroidSDK18UserClientProtocol_")
@protocol UserClientProtocol
- (void)setUser:(DataroidUser * _Nonnull)user;
- (void)clearUser;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <UserClientProtocol>
- (void)setUser:(DataroidUser * _Nonnull)user;
- (void)clearUser;
@end


SWIFT_PROTOCOL("_TtP11DataroidSDK22GeofenceClientProtocol_")
@protocol GeofenceClientProtocol
- (void)enableGeofencing;
- (void)disableGeofencing;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <GeofenceClientProtocol>
- (void)enableGeofencing;
- (void)disableGeofencing;
@end




SWIFT_PROTOCOL("_TtP11DataroidSDK20LoggerClientProtocol_")
@protocol LoggerClientProtocol
- (void)verbose:(NSString * _Nullable)message;
- (void)debug:(NSString * _Nullable)message;
- (void)info:(NSString * _Nullable)message;
- (void)warning:(NSString * _Nullable)message;
- (void)error:(NSString * _Nullable)message;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <LoggerClientProtocol>
- (void)verbose:(NSString * _Nullable)message;
- (void)debug:(NSString * _Nullable)message;
- (void)info:(NSString * _Nullable)message;
- (void)warning:(NSString * _Nullable)message;
- (void)error:(NSString * _Nullable)message;
@end



SWIFT_PROTOCOL("_TtP11DataroidSDK28SuperAttributeClientProtocol_")
@protocol SuperAttributeClientProtocol
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key intValue:(NSInteger)intValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key doubleValue:(double)doubleValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key int64Value:(int64_t)int64Value;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key floatValue:(float)floatValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key boolValue:(BOOL)boolValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key dateValue:(NSDate * _Nonnull)dateValue;
- (BOOL)clearSuperAttributeWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)clearAllSuperAttributes;
- (NSDictionary<NSString *, id> * _Nonnull)getAllSuperAttributes SWIFT_WARN_UNUSED_RESULT;
- (void)updateSuperAttributeWithKey:(NSString * _Nonnull)key value:(id _Nonnull)value;
@end


@interface Dataroid (SWIFT_EXTENSION(DataroidSDK)) <SuperAttributeClientProtocol>
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key intValue:(NSInteger)intValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key doubleValue:(double)doubleValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key int64Value:(int64_t)int64Value;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key floatValue:(float)floatValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key boolValue:(BOOL)boolValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key dateValue:(NSDate * _Nonnull)dateValue;
- (BOOL)clearSuperAttributeWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)clearAllSuperAttributes;
- (NSDictionary<NSString *, id> * _Nonnull)getAllSuperAttributes SWIFT_WARN_UNUSED_RESULT;
- (void)updateSuperAttributeWithKey:(NSString * _Nonnull)key value:(id _Nonnull)value;
@end


@class InAppMessagingConfig;
@class LoggerConfig;
@class NetworkConfig;
@class SessionConfig;
@class ScreenInteractionConfig;
@class ScreenTrackingConfig;
@class SnapshotConfig;
@class NotificationConfig;

SWIFT_CLASS("_TtC11DataroidSDK14DataroidConfig")
@interface DataroidConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull serverURL;
@property (nonatomic, readonly, copy) NSString * _Nullable appGroup;
@property (nonatomic, copy) NSString * _Nullable frameworkIdentifier;
@property (nonatomic) NSInteger eventStorageLimit;
@property (nonatomic, strong) APMConfig * _Nonnull apm;
@property (nonatomic, strong) AppInboxConfig * _Nonnull appInbox;
@property (nonatomic, strong) ComponentInteractionConfig * _Nonnull componentInteraction;
@property (nonatomic, strong) CrashReportingConfig * _Nonnull crashReporting;
@property (nonatomic, strong) DatabaseConfig * _Nonnull database;
@property (nonatomic, strong) InAppMessagingConfig * _Nonnull inApp;
@property (nonatomic, strong) LoggerConfig * _Nonnull logger;
@property (nonatomic, strong) NetworkConfig * _Nonnull network;
@property (nonatomic, strong) SessionConfig * _Nonnull session;
@property (nonatomic, strong) ScreenInteractionConfig * _Nonnull screenInteraction;
@property (nonatomic, strong) ScreenTrackingConfig * _Nonnull screenTracking;
@property (nonatomic, strong) SnapshotConfig * _Nonnull snapshot;
@property (nonatomic, strong) NotificationConfig * _Nonnull notification;
@property (nonatomic, copy) NSString * _Nullable previousDomainParameter;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull blacklistedEvents;
@property (nonatomic, readonly, copy) NSString * _Nonnull languageCode;
@property (nonatomic) BOOL eventCollectingEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithSdkKey:(NSString * _Nonnull)sdkKey serverURL:(NSString * _Nonnull)serverURL appGroup:(NSString * _Nonnull)appGroup languageCode:(NSString * _Nonnull)languageCode databaseConfig:(DatabaseConfig * _Nullable)databaseConfig OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSdkKey:(NSString * _Nonnull)sdkKey serverURL:(NSString * _Nonnull)serverURL appGroup:(NSString * _Nonnull)appGroup languageCode:(NSString * _Nonnull)languageCode;
@end




SWIFT_CLASS("_TtC11DataroidSDK23DataroidPredefinedEvent")
@interface DataroidPredefinedEvent : NSObject
/// Avoid initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Event name for screen tracking start event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewTrackingStart;)
+ (NSString * _Nonnull)viewTrackingStart SWIFT_WARN_UNUSED_RESULT;
/// Event name for screen tracking stop event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewTrackingStop;)
+ (NSString * _Nonnull)viewTrackingStop SWIFT_WARN_UNUSED_RESULT;
/// Event name for push token update event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pushTokenUpdate;)
+ (NSString * _Nonnull)pushTokenUpdate SWIFT_WARN_UNUSED_RESULT;
/// Event name for language update event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull languageUpdate;)
+ (NSString * _Nonnull)languageUpdate SWIFT_WARN_UNUSED_RESULT;
/// Event name for user information update event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userUpdate;)
+ (NSString * _Nonnull)userUpdate SWIFT_WARN_UNUSED_RESULT;
/// Event name for session start event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sessionStart;)
+ (NSString * _Nonnull)sessionStart SWIFT_WARN_UNUSED_RESULT;
/// Event name for session stop event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sessionStop;)
+ (NSString * _Nonnull)sessionStop SWIFT_WARN_UNUSED_RESULT;
/// Event name for notification open event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationOpen;)
+ (NSString * _Nonnull)notificationOpen SWIFT_WARN_UNUSED_RESULT;
/// Event name for notification received event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationReceived;)
+ (NSString * _Nonnull)notificationReceived SWIFT_WARN_UNUSED_RESULT;
/// Event name for goal achieved event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull goalAchieved;)
+ (NSString * _Nonnull)goalAchieved SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message button click event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageButtonClick;)
+ (NSString * _Nonnull)inAppMessageButtonClick SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message read, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageRead;)
+ (NSString * _Nonnull)inAppMessageRead SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message close, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageClose;)
+ (NSString * _Nonnull)inAppMessageClose SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message fetched
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageFetched;)
+ (NSString * _Nonnull)inAppMessageFetched SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s first opening, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkFirstOpen;)
+ (NSString * _Nonnull)sdkFirstOpen SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s device update settings event, shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceUpdateSettings;)
+ (NSString * _Nonnull)deviceUpdateSettings SWIFT_WARN_UNUSED_RESULT;
/// Event name for APM network errors, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull apmNetworkError;)
+ (NSString * _Nonnull)apmNetworkError SWIFT_WARN_UNUSED_RESULT;
/// Event name for APM http events, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull apmHTTPCall;)
+ (NSString * _Nonnull)apmHTTPCall SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s add to cart commerce event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addToCart;)
+ (NSString * _Nonnull)addToCart SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that user completes a purchase,
/// shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchase;)
+ (NSString * _Nonnull)purchase SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s search commerce event, shouldn’t be used manually
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull search;)
+ (NSString * _Nonnull)search SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s view product commerce event
/// that whenever a single product is displayed, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewProduct;)
+ (NSString * _Nonnull)viewProduct SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that user lists items within a specific category,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewCategory;)
+ (NSString * _Nonnull)viewCategory SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that removing item(s) from cart,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull removeFromCart;)
+ (NSString * _Nonnull)removeFromCart SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that user removes all items from cart,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clearCart;)
+ (NSString * _Nonnull)clearCart SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event for initiating a checkout/payment process,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull startCheckout;)
+ (NSString * _Nonnull)startCheckout SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event
/// that not being able to go to the next step in the checkout funnel,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorCheckout;)
+ (NSString * _Nonnull)errorCheckout SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event
/// that adding an item to wish list,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addToWishList;)
+ (NSString * _Nonnull)addToWishList SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that remove an item from wish list,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull removeFromWishList;)
+ (NSString * _Nonnull)removeFromWishList SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s deeplink launched event that is for used tracking referrals for deeplinks.
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deeplinkLaunched;)
+ (NSString * _Nonnull)deeplinkLaunched SWIFT_WARN_UNUSED_RESULT;
/// UIButton <code>touchUpInside</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull buttonClick;)
+ (NSString * _Nonnull)buttonClick SWIFT_WARN_UNUSED_RESULT;
/// <code>radioButtonSelected</code> event
/// Native apps have no radio button, this event is used for web bridge
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull radioButtonSelect;)
+ (NSString * _Nonnull)radioButtonSelect SWIFT_WARN_UNUSED_RESULT;
/// UISwitch <code>valueChanged</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull toggleChange;)
+ (NSString * _Nonnull)toggleChange SWIFT_WARN_UNUSED_RESULT;
/// UITextField and UITextView <code>textDidEndEditing</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull textChange;)
+ (NSString * _Nonnull)textChange SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>tap</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull touch;)
+ (NSString * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>swipe</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swipe;)
+ (NSString * _Nonnull)swipe SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>long press</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull longPress;)
+ (NSString * _Nonnull)longPress SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>double tap</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull doubleTap;)
+ (NSString * _Nonnull)doubleTap SWIFT_WARN_UNUSED_RESULT;
/// Event name for crash event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull crash;)
+ (NSString * _Nonnull)crash SWIFT_WARN_UNUSED_RESULT;
/// Event name for capping
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull capped;)
+ (NSString * _Nonnull)capped SWIFT_WARN_UNUSED_RESULT;
/// Event name for context triggered
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull contextTriggered;)
+ (NSString * _Nonnull)contextTriggered SWIFT_WARN_UNUSED_RESULT;
@end


/// Interface for view/view controllers, that needs to configure screen tracking
SWIFT_PROTOCOL("_TtP11DataroidSDK34DataroidScreenTrackingConfigurator_")
@protocol DataroidScreenTrackingConfigurator <NSObject>
/// Auto screen tracking name for the object
@property (nonatomic, readonly, copy) NSString * _Nonnull dtr_screenTrackingName;
@end


/// Interface for defining screen tracking exclusions
SWIFT_PROTOCOL("_TtP11DataroidSDK31DataroidScreenTrackingExclusion_")
@protocol DataroidScreenTrackingExclusion <NSObject>
/// Flag that indicates, if current screen should be an exclusion from screen tracking
@property (nonatomic, readonly) BOOL dtr_isAutoScreenTrackingExclusion;
@end


SWIFT_CLASS_NAMED("DataroidTrustPolicy")
@interface DTRTrustPolicy : NSObject
- (nonnull instancetype)initWithEndpoint:(NSString * _Nonnull)endpoint certificates:(NSArray<DTRCertificate *> * _Nonnull)certificates OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum DTRGender : NSInteger;
@class DTRUserAttributes;

SWIFT_CLASS("_TtC11DataroidSDK12DataroidUser")
@interface DataroidUser : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable phone;
@property (nonatomic, copy) NSString * _Nullable nationalId;
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic) enum DTRGender gender;
@property (nonatomic, copy) NSDate * _Nullable dateOfBirth;
@property (nonatomic, strong) DTRUserAttributes * _Nullable attributes;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Event attributes for deeplink launched event that user opens application with deeplink
SWIFT_CLASS_NAMED("DeeplinkAttributes")
@interface DTRDeeplinkAttributes : NSObject
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DTRDeeplinkAttributes (SWIFT_EXTENSION(DataroidSDK))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end


@class DTRTouchPoint;

SWIFT_CLASS_NAMED("TapTrackingAttributes")
@interface DTRTapTrackingAttributes : DTRUIEventTrackingAttributes
/// Initialize TapTrackingAttributes
/// \param touchPoint touchPoint
///
/// \param viewLabel viewLabel for touch’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for touch’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithTouchPoint:(DTRTouchPoint * _Nonnull)touchPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("DoubleTapTrackingAttributes")
@interface DTRDoubleTapTrackingAttributes : DTRTapTrackingAttributes
- (nonnull instancetype)initWithTouchPoint:(DTRTouchPoint * _Nonnull)touchPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DTRGender, "Gender", open) {
  DTRGenderUndefined = 0,
  DTRGenderMale = 1,
  DTRGenderFemale = 2,
  DTRGenderNonBinary = 3,
  DTRGenderUnknown = 4,
};



SWIFT_PROTOCOL("_TtP11DataroidSDK25GeolocationClientProtocol_")
@protocol GeolocationClientProtocol
- (void)setCountry:(NSString * _Nonnull)country;
- (void)setContinent:(NSString * _Nonnull)continent;
- (void)setCity:(NSString * _Nonnull)city;
- (void)setRegion:(NSString * _Nonnull)region;
- (void)setCoordinatesWithLatitude:(double)latitude longitude:(double)longitude;
- (void)clearCountry;
- (void)clearContinent;
- (void)clearCity;
- (void)clearRegion;
- (void)clearCoordinates;
@end

enum DTRHTTPMethod : NSInteger;

/// Object that holds http request & response metrics and relevant
/// properties for the purpose of sending to server
SWIFT_CLASS_NAMED("HTTPCallAttributes")
@interface DTRHTTPCallAttributes : NSObject
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSString * _Nullable errorType;
@property (nonatomic, copy) NSString * _Nullable errorCode;
@property (nonatomic, copy) NSString * _Nullable errorMessage;
/// Object that holds custom attributes
@property (nonatomic, strong) DTRAPMAttributes * _Nullable attributes;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url method:(enum DTRHTTPMethod)method statusCode:(NSInteger)statusCode duration:(NSTimeInterval)duration success:(BOOL)success;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_UNAVAILABLE
@interface DTRHTTPCallAttributes (SWIFT_EXTENSION(DataroidSDK))
- (enum DTRHTTPMethod)getMethod SWIFT_WARN_UNUSED_RESULT;
- (void)setMethod:(enum DTRHTTPMethod)method;
- (NSInteger)getStatusCode SWIFT_WARN_UNUSED_RESULT;
- (void)setStatusCode:(NSInteger)statusCode;
- (NSTimeInterval)getDuration SWIFT_WARN_UNUSED_RESULT;
- (void)setDuration:(NSTimeInterval)duration;
- (BOOL)getSuccess SWIFT_WARN_UNUSED_RESULT;
- (void)setSuccess:(BOOL)success;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DTRHTTPMethod, "HTTPMethod", open) {
  DTRHTTPMethodGET = 0,
  DTRHTTPMethodHEAD = 1,
  DTRHTTPMethodPOST = 2,
  DTRHTTPMethodPUT = 3,
  DTRHTTPMethodDELETE = 4,
  DTRHTTPMethodCONNECT = 5,
  DTRHTTPMethodOPTIONS = 6,
  DTRHTTPMethodTRACE = 7,
  DTRHTTPMethodPATCH = 8,
};

@protocol DTRInAppMessageListener;
@protocol DTRInAppMessageAlertTapListener;
@protocol DTRInAppMessageAlertDeeplinkHandler;

SWIFT_PROTOCOL("_TtP11DataroidSDK19InAppClientProtocol_")
@protocol InAppClientProtocol
@property (nonatomic, strong) id <DTRInAppMessageListener> _Nullable inAppMessageListenerDelegate;
@property (nonatomic, strong) id <DTRInAppMessageAlertTapListener> _Nullable alertTapListenerDelegate;
@property (nonatomic, strong) id <DTRInAppMessageAlertDeeplinkHandler> _Nullable alertDeeplinkHandlerDelegate;
@end

/// Action type enum for in-app message actions
/// <ul>
///   <li>
///     dismiss: Just dismissing the alert
///   </li>
///   <li>
///     gotoUrl: Opening a url
///   </li>
///   <li>
///     gotoDeeplink: Opening a custom deeplink
///   </li>
///   <li>
///     copy: Copying the provided text
///   </li>
///   <li>
///     custom: Custom handling
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageActionType, "InAppMessageActionType", open) {
  DTRInAppMessageActionTypeDismiss = 0,
  DTRInAppMessageActionTypeGotoUrl = 1,
  DTRInAppMessageActionTypeGotoDeeplink = 2,
  DTRInAppMessageActionTypeCopy = 3,
  DTRInAppMessageActionTypeCustom = 4,
};


/// Interface for handling deeplinks for in-app mesages alerts
SWIFT_PROTOCOL_NAMED("InAppMessageAlertDeeplinkHandler")
@protocol DTRInAppMessageAlertDeeplinkHandler
/// Delegate method that will be invoked when a button deeplink action is implemented
/// \param deeplink String that identifies the deeplink
///
- (void)shouldHandleDeeplinkWithDeeplink:(NSString * _Nullable)deeplink;
@end

@class DTRInAppMessageButton;
@class DTRInAppMessageContent;
@class DTRInAppMessageCustomContent;

/// Interface for listening tap events on in-app message alerts
SWIFT_PROTOCOL_NAMED("InAppMessageAlertTapListener")
@protocol DTRInAppMessageAlertTapListener
@optional
/// Delegate method that will be invoked when a custom handled alert button tapped on in-app message alert
/// \param button Button that is tapped
///
/// \param content Related in-app message content
///
- (void)didTapAlertWithButton:(DTRInAppMessageButton * _Nonnull)button content:(DTRInAppMessageContent * _Nonnull)content;
/// Delegate method that will be invoked when a custom handled button tapped on custom in-app
/// \param button Button that is tapped
///
/// \param content Related in-app message content
///
- (void)didTapCustomButtonWithButton:(DTRInAppMessageButton * _Nonnull)button content:(DTRInAppMessageCustomContent * _Nonnull)content;
@end


SWIFT_CLASS_NAMED("InAppMessageAttributeCondition")
@interface DTRInAppMessageAttributeCondition : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull values;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageAvailabilityOption, "InAppMessageAvailabilityOption", open) {
  DTRInAppMessageAvailabilityOptionAvailableHours = 0,
  DTRInAppMessageAvailabilityOptionAnytime = 1,
};


SWIFT_CLASS_NAMED("InAppMessageButton")
@interface DTRInAppMessageButton : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable actionURI;
@property (nonatomic, readonly, copy) NSString * _Nullable buttonId;
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable textToCopy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageCappingRuleTimeUnit, "InAppMessageCappingRuleTimeUnit", open) {
  DTRInAppMessageCappingRuleTimeUnitDays = 0,
  DTRInAppMessageCappingRuleTimeUnitHours = 1,
  DTRInAppMessageCappingRuleTimeUnitMinutes = 2,
};


SWIFT_CLASS_NAMED("InAppMessageContent")
@interface DTRInAppMessageContent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) NSString * _Nullable language;
@property (nonatomic, readonly, copy) NSArray<DTRInAppMessageButton *> * _Nullable buttons;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum DTRInAppMessageLocation : NSInteger;

SWIFT_CLASS_NAMED("InAppMessageCustomContent")
@interface DTRInAppMessageCustomContent : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
@property (nonatomic, readonly) enum DTRInAppMessageLocation location;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageDisplayFrequency, "InAppMessageDisplayFrequency", open) {
  DTRInAppMessageDisplayFrequencyOncePerEvent = 0,
  DTRInAppMessageDisplayFrequencyOncePerSession = 1,
  DTRInAppMessageDisplayFrequencyEveryTime = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageHorizontalLocation, "InAppMessageHorizontalLocation", open) {
  DTRInAppMessageHorizontalLocationRight = 0,
  DTRInAppMessageHorizontalLocationCenter = 1,
  DTRInAppMessageHorizontalLocationLeft = 2,
};


/// Interface for the objects that listen received in-app messages
SWIFT_PROTOCOL_NAMED("InAppMessageListener")
@protocol DTRInAppMessageListener
@optional
/// Delegate method that will be invoked when in-app message received
/// \param content Content of the in-app message
///
- (void)didReceiveInAppMessageWithContent:(DTRInAppMessageContent * _Nonnull)content;
/// Delegate method that will be invoked when custom in-app message received
/// \param content Content of the custom in-app message
///
- (void)didReceiveCustomInAppMessageWithContent:(DTRInAppMessageCustomContent * _Nonnull)content;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageLocation, "InAppMessageLocation", open) {
  DTRInAppMessageLocationTop = 0,
  DTRInAppMessageLocationBottom = 1,
  DTRInAppMessageLocationFullScreen = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DTRInAppMessageScheduleDay, "InAppMessageScheduleDay", open) {
  DTRInAppMessageScheduleDaySunday = 1,
  DTRInAppMessageScheduleDayMonday = 2,
  DTRInAppMessageScheduleDayTuesday = 3,
  DTRInAppMessageScheduleDayWednesday = 4,
  DTRInAppMessageScheduleDayThursday = 5,
  DTRInAppMessageScheduleDayFriday = 6,
  DTRInAppMessageScheduleDaySaturday = 7,
};


SWIFT_CLASS("_TtC11DataroidSDK20InAppMessagingConfig")
@interface InAppMessagingConfig : NSObject
@property (nonatomic) BOOL enabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DTRPushEvent;

SWIFT_CLASS_NAMED("InboxMessage")
@interface DTRInboxMessage : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) int64_t invalidMessageId;)
+ (int64_t)invalidMessageId SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) int64_t id;
@property (nonatomic, readonly) enum DTRInboxMessageType type;
@property (nonatomic, readonly, copy) NSDate * _Nullable receivedDate;
@property (nonatomic, readonly, copy) NSDate * _Nullable expirationDate;
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
@property (nonatomic, readonly) enum DTRInboxMessageStatus status;
@property (nonatomic, readonly, strong) DTRPushEvent * _Nullable pushEvent;
@property (nonatomic, readonly, copy) NSString * _Nullable payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DTRInboxMessageStatus, "InboxMessageStatus", open) {
  DTRInboxMessageStatusUnread = 0,
  DTRInboxMessageStatusRead = 1,
  DTRInboxMessageStatusDismissed = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DTRInboxMessageType, "InboxMessageType", open) {
  DTRInboxMessageTypePush = 0,
  DTRInboxMessageTypeInApp = 1,
  DTRInboxMessageTypeGeofence = 2,
  DTRInboxMessageTypeActionBased = 3,
};



SWIFT_CLASS("_TtC11DataroidSDK15LocationFetcher")
@interface LocationFetcher : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class CLLocationManager;
@class CLLocation;

@interface LocationFetcher (SWIFT_EXTENSION(DataroidSDK)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end


enum DTRLoggerLevel : NSUInteger;

SWIFT_CLASS("_TtC11DataroidSDK12LoggerConfig")
@interface LoggerConfig : NSObject
@property (nonatomic) enum DTRLoggerLevel logLevel;
@property (nonatomic) BOOL writeToFile;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, DTRLoggerLevel, "LoggerLevel", open) {
  DTRLoggerLevelNone = 0,
  DTRLoggerLevelError = 1,
  DTRLoggerLevelWarning = 2,
  DTRLoggerLevelInfo = 3,
  DTRLoggerLevelDebug = 4,
  DTRLoggerLevelVerbose = 5,
};


SWIFT_CLASS_NAMED("LongPressTrackingAttributes")
@interface DTRLongPressTrackingAttributes : DTRTapTrackingAttributes
- (nonnull instancetype)initWithTouchPoint:(DTRTouchPoint * _Nonnull)touchPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, DTRModuleTag, "ModuleTag", open) {
  DTRModuleTagActionBased = 0,
  DTRModuleTagAnalytics = 1,
  DTRModuleTagApm = 2,
  DTRModuleTagAppInbox = 3,
  DTRModuleTagBackoff = 4,
  DTRModuleTagCore = 5,
  DTRModuleTagDb = 6,
  DTRModuleTagDeeplink = 7,
  DTRModuleTagEventLimit = 8,
  DTRModuleTagEvent = 9,
  DTRModuleTagGoal = 10,
  DTRModuleTagInApp = 11,
  DTRModuleTagRemoteConfig = 12,
  DTRModuleTagScreenTracking = 13,
  DTRModuleTagSuperAttribute = 14,
  DTRModuleTagGeolocation = 15,
  DTRModuleTagSnapshot = 16,
  DTRModuleTagGeofence = 17,
  DTRModuleTagCrash = 18,
  DTRModuleTagWebBridge = 19,
  DTRModuleTagContextTrigger = 20,
  DTRModuleTagIdAllocation = 21,
};


SWIFT_CLASS_NAMED("MutableHttpCallAttributes")
@interface DTRMutableHttpCallAttributes : NSObject
/// Type of error
@property (nonatomic, copy) NSString * _Nullable errorType;
/// Error code
@property (nonatomic, copy) NSString * _Nullable errorCode;
/// Error message
@property (nonatomic, copy) NSString * _Nullable errorMessage;
/// Object that holds custom attributes
@property (nonatomic, strong) DTRAPMAttributes * _Nullable attributes;
- (void)setSuccess:(BOOL)isSuccess;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("MutableNetworkErrorAttributes")
@interface DTRMutableNetworkErrorAttributes : NSObject
/// Custom message
@property (nonatomic, copy) NSString * _Nullable message;
/// Object that holds custom attributes
@property (nonatomic, strong) DTRAPMAttributes * _Nullable attributes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end










SWIFT_CLASS("_TtC11DataroidSDK13NetworkConfig")
@interface NetworkConfig : NSObject
@property (nonatomic, copy) NSArray<DTRTrustPolicy *> * _Nullable trustPolicies;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DTRNetworkErrorType;

/// Object that holds network errors and relevant properties
/// for the purpose of sending to server
SWIFT_CLASS_NAMED("NetworkErrorAttributes")
@interface DTRNetworkErrorAttributes : NSObject
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable headers;
@property (nonatomic, strong) DTRNetworkErrorType * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable exception;
@property (nonatomic, copy) NSString * _Nullable message;
/// Object that holds custom attributes
@property (nonatomic, strong) DTRAPMAttributes * _Nullable attributes;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url method:(enum DTRHTTPMethod)method duration:(NSTimeInterval)duration type:(DTRNetworkErrorType * _Nonnull)type exception:(NSString * _Nonnull)exception;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Network error types
SWIFT_CLASS_NAMED("ErrorType")
@interface DTRNetworkErrorType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkErrorType * _Nonnull unknown;)
+ (DTRNetworkErrorType * _Nonnull)unknown SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkErrorType * _Nonnull noConnection;)
+ (DTRNetworkErrorType * _Nonnull)noConnection SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkErrorType * _Nonnull ssl;)
+ (DTRNetworkErrorType * _Nonnull)ssl SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkErrorType * _Nonnull timeout;)
+ (DTRNetworkErrorType * _Nonnull)timeout SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DTRNetworkErrorType * _Nonnull insecureConnection;)
+ (DTRNetworkErrorType * _Nonnull)insecureConnection SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger rawValue;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)formUnion:(DTRNetworkErrorType * _Nonnull)other;
- (void)formIntersection:(DTRNetworkErrorType * _Nonnull)other;
- (void)formSymmetricDifference:(DTRNetworkErrorType * _Nonnull)other;
/// Initialize network record object
/// \param error Error object
///
- (nullable instancetype)initWithError:(NSError * _Nonnull)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_UNAVAILABLE
@interface DTRNetworkErrorAttributes (SWIFT_EXTENSION(DataroidSDK))
- (enum DTRHTTPMethod)getMethod SWIFT_WARN_UNUSED_RESULT;
- (void)setMethod:(enum DTRHTTPMethod)method;
- (NSTimeInterval)getDuration SWIFT_WARN_UNUSED_RESULT;
- (void)setDuration:(NSTimeInterval)duration;
@end

/// Action type enum for notification actions
/// <ul>
///   <li>
///     none: No action
///   </li>
///   <li>
///     openApp: Opening the application
///   </li>
///   <li>
///     gotoUrl: Opening a url
///   </li>
///   <li>
///     gotoDeeplink: Opening a custom deeplink
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, DTRNotificationActionType, "NotificationActionType", open) {
  DTRNotificationActionTypeNone = 0,
  DTRNotificationActionTypeOpenApp = 1,
  DTRNotificationActionTypeGotoUrl = 2,
  DTRNotificationActionTypeGotoDeeplink = 3,
};


SWIFT_CLASS("_TtC11DataroidSDK18NotificationConfig")
@interface NotificationConfig : NSObject
@property (nonatomic) BOOL enableSwizzling;
@property (nonatomic) BOOL openUrlsAutomatically;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Product model for commerce events
SWIFT_CLASS_NAMED("Product")
@interface DTRProduct : NSObject
/// Product identifier
@property (nonatomic, copy) NSString * _Nonnull id;
/// Product name
@property (nonatomic, copy) NSString * _Nonnull name;
/// Product’s description
@property (nonatomic, copy) NSString * _Nullable productDescription;
/// Brand of product
@property (nonatomic, copy) NSString * _Nullable brand;
/// Product quantity
@property (nonatomic) NSInteger quantity;
/// Price of product
@property (nonatomic) NSDecimal price;
/// Variant of product
@property (nonatomic, copy) NSString * _Nullable variant;
/// Product category
@property (nonatomic, copy) NSString * _Nullable category;
/// Currency for product’s price
@property (nonatomic, copy) NSString * _Nonnull currency;
- (nullable instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name quantity:(NSInteger)quantity price:(NSDecimal)price currency:(NSString * _Nonnull)currency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Event attributes for event that user completes a purchase.
/// Trigger this event when user completes a purchase.
/// Implementing a Purchase event allows you to see your revenue in real-time,
/// understand how many users are making purchases,
/// see which items are most popular,
/// and track plenty of other important purchase-related metrics.
SWIFT_CLASS_NAMED("PurchaseEventAttributes")
@interface DTRPurchaseEventAttributes : DTRAttributes
- (nonnull instancetype)initWithCurrency:(NSString * _Nonnull)currency value:(NSDecimal)value products:(NSArray<DTRProduct *> * _Nullable)products success:(BOOL)success OBJC_DESIGNATED_INITIALIZER;
/// Add tax value attribute to event
/// \param tax Tax applied at purchase
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addTax:(NSDecimal)tax;
/// Adds ship attribute to event
/// \param ship Ship of purchase
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addShip:(NSDecimal)ship;
/// Adds discount value attribute to event
/// \param discount Discount applied at purchase
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addDiscount:(NSDecimal)discount;
/// Adds coupon attribute to event
/// \param coupon Coupon that used at the purchase action
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addCoupon:(NSString * _Nonnull)coupon;
/// Adds transaction referance attribute to event
/// \param trxId Transaction referance
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addTrxId:(NSString * _Nonnull)trxId;
/// Adds payment method attribute to event
/// \param paymentMethod Payment method used at purchase
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addPaymentMethod:(NSString * _Nonnull)paymentMethod;
/// Adds quantity attribute to event
/// \param quantity Quantity of items are purchased
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addQuantity:(NSInteger)quantity;
/// Adds error code attribute to event
/// \param errorCode Error code obtained from purchase action
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addErrorCode:(NSString * _Nonnull)errorCode;
/// Adds error message attribute to event
/// \param errorMessage Error message obtained from purchase action
///
///
/// returns:
/// Event builder’s itself
- (DTRPurchaseEventAttributes * _Nonnull)addErrorMessage:(NSString * _Nonnull)errorMessage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("PushEvent")
@interface DTRPushEvent : NSObject
@property (nonatomic, readonly) enum DTRNotificationActionType notificationAction;
@property (nonatomic, readonly, copy) NSString * _Nullable soundName;
@property (nonatomic, readonly, copy) NSString * _Nullable pushID;
@property (nonatomic, readonly, copy) NSString * _Nullable scheduleID;
@property (nonatomic, readonly, copy) NSString * _Nullable eventID;
@property (nonatomic, readonly, copy) NSURL * _Nullable mediaURL;
@property (nonatomic, readonly, copy) NSURL * _Nullable targetURL;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
@property (nonatomic, readonly, copy) NSString * _Nullable conversionRules;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






SWIFT_CLASS_NAMED("PushEventManager")
@interface DTRPushEventManager : NSObject
@property (nonatomic, readonly, strong) DTRPushEvent * _Nullable latestPushEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Attributes for that removing item from cart.
/// Trigger this event when user removes item(s) from cart.
/// Implementing a Remove from Cart event allows you to understand how many users remove item(s)
/// from cart and what items are tend to be abandoned through checkout process.
SWIFT_CLASS_NAMED("RemoveFromCartEventAttributes")
@interface DTRRemoveFromCartEventAttributes : DTRAttributes
- (nonnull instancetype)initWithProduct:(DTRProduct * _Nonnull)product OBJC_DESIGNATED_INITIALIZER;
/// Adds a value attribute to event
/// \param value Value of product
///
///
/// returns:
/// Event builder’s itself
- (DTRRemoveFromCartEventAttributes * _Nonnull)addValue:(NSDecimal)value;
/// Adds total cart value attribute to event
/// \param totalCartValue Total cart value
///
///
/// returns:
/// Event builder’s itself
- (DTRRemoveFromCartEventAttributes * _Nonnull)addTotalCartValue:(NSDecimal)totalCartValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("RemoveFromWishListEventAttributes")
@interface DTRRemoveFromWishListEventAttributes : DTRAttributes
- (nonnull instancetype)initWithProduct:(DTRProduct * _Nonnull)product OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DTRSwipeTrackingAttributes;

SWIFT_PROTOCOL("_TtP11DataroidSDK31ScreenInteractionClientProtocol_")
@protocol ScreenInteractionClientProtocol
- (void)collectTouch:(DTRTapTrackingAttributes * _Nonnull)attributes;
- (void)collectSwipe:(DTRSwipeTrackingAttributes * _Nonnull)attributes;
- (void)collectLongPress:(DTRLongPressTrackingAttributes * _Nonnull)attributes;
- (void)collectDoubleTap:(DTRDoubleTapTrackingAttributes * _Nonnull)attributes;
@end


SWIFT_CLASS("_TtC11DataroidSDK23ScreenInteractionConfig")
@interface ScreenInteractionConfig : NSObject
@property (nonatomic) BOOL autoCollectingEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DTRViewTrackingExtras;

/// Interface for screen tracking related operations
SWIFT_PROTOCOL_NAMED("ScreenTracker")
@protocol DTRScreenTracker
/// Starts tracking for view
/// \param view View that will be tracked
///
/// \param name Tracking name for the view
///
- (void)startTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name;
/// Starts tracking for view
/// \param view View that will be tracked
///
/// \param name Tracking name for the view
///
/// \param extras Extra attributes for tracking event
///
- (void)startTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name extras:(DTRViewTrackingExtras * _Nullable)extras;
/// Starts tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
- (void)startTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name;
/// Starts tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
/// \param extras Extra attributes for tracking event
///
- (void)startTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name extras:(DTRViewTrackingExtras * _Nullable)extras;
/// Stops tracking for view
/// \param view View that is being tracked
///
/// \param name Tracking name for the view
///
- (void)stopTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name;
/// Stops tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
- (void)stopTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name;
@end


SWIFT_PROTOCOL("_TtP11DataroidSDK28ScreenTrackingClientProtocol_")
@protocol ScreenTrackingClientProtocol
- (void)viewStartWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name;
- (void)viewStartWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name extras:(DTRViewTrackingExtras * _Nonnull)extras;
- (void)viewStartWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name;
- (void)viewStartWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name extras:(DTRViewTrackingExtras * _Nonnull)extras;
- (void)viewStopWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name;
- (void)viewStopWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name;
@end


SWIFT_CLASS("_TtC11DataroidSDK20ScreenTrackingConfig")
@interface ScreenTrackingConfig : NSObject
@property (nonatomic) BOOL enabled;
@property (nonatomic) BOOL autoCollectingEnabled;
@property (nonatomic) BOOL shouldTrackInnerViewController;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull viewControllerExclusions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Event attributes for event that search action,
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS_NAMED("SearchEventAttributes")
@interface DTRSearchEventAttributes : DTRAttributes
/// Initializes search event attributes
/// \param query Search query
///
- (nonnull instancetype)initWithQuery:(NSString * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Event builder for event that search action,
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS("_TtC11DataroidSDK18SearchEventBuilder")
@interface SearchEventBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11DataroidSDK13SessionConfig")
@interface SessionConfig : NSObject
@property (nonatomic) NSTimeInterval timeout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DataroidSDK14SnapshotConfig")
@interface SnapshotConfig : NSObject
@property (nonatomic) BOOL enabled;
@property (nonatomic) NSInteger latencyInMillis;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable enabledBundleIDs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Event attributes for event that search action,
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS_NAMED("StartCheckoutEventAttributes")
@interface DTRStartCheckoutEventAttributes : DTRAttributes
- (nonnull instancetype)initWithValue:(NSDecimal)value currency:(NSString * _Nonnull)currency OBJC_DESIGNATED_INITIALIZER;
/// Adds quantity attribute to event
/// \param quantity Quantity of checkout items
///
///
/// returns:
/// Event builder’s itself
- (DTRStartCheckoutEventAttributes * _Nonnull)addQuantity:(NSInteger)quantity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("SwipeTrackingAttributes")
@interface DTRSwipeTrackingAttributes : DTRUIEventTrackingAttributes
/// Initialize SwipeTrackingAttributes
/// \param startPoint startPoint
///
/// \param endPoint endPoint
///
/// \param viewLabel viewLabel for touch’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for touch’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithStartPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end

@class UISwitch;

SWIFT_CLASS_NAMED("SwitchButtonTrackingAttributes")
@interface DTRSwitchButtonTrackingAttributes : DTRUIEventTrackingAttributes
/// Initialize SwitchButtonTrackingAttributes
/// \param button switchButton to track
///
- (nonnull instancetype)initWithSwitchButton:(UISwitch * _Nonnull)switchButton OBJC_DESIGNATED_INITIALIZER;
/// Initialize SwitchButtonTrackingAttributes
/// \param className className for button (e.g. “UISwitch”)
///
/// \param isChecked isChecked for button (e.g. button.isOn)
///
/// \param accessibilityLabel accessibilityLabel for button
///
/// \param componentId componentId for button
///
/// \param coordinates coordinates for button. (e.g. button.frame)
///
/// \param viewLabel viewLabel for button’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for button’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithClassName:(NSString * _Nonnull)className isChecked:(BOOL)isChecked accessibilityLabel:(NSString * _Nullable)accessibilityLabel componentId:(NSString * _Nullable)componentId coordinates:(DTRUIViewPixelCoordinate * _Nullable)coordinates viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end


@class UITextField;

SWIFT_CLASS_NAMED("TextFieldTrackingAttributes")
@interface DTRTextFieldTrackingAttributes : DTRUIEventTrackingAttributes
/// Initialize TextFieldTrackingAttributes
/// \param textField textField to track
///
- (nonnull instancetype)initWithTextField:(UITextField * _Nonnull)textField OBJC_DESIGNATED_INITIALIZER;
/// Initialize TextFieldTrackingAttributes
/// \param className className for textField (e.g. “UITextField”)
///
/// \param value value for textField
///
/// \param placeholder placeholder for textField
///
/// \param accessibilityLabel accessibilityLabel for textField
///
/// \param componentId componentId for textField
///
/// \param coordinates coordinates for textField. (e.g. textField.frame)
///
/// \param viewLabel viewLabel for textField’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for textField’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithClassName:(NSString * _Nonnull)className value:(NSString * _Nonnull)value placeholder:(NSString * _Nullable)placeholder accessibilityLabel:(NSString * _Nullable)accessibilityLabel componentId:(NSString * _Nullable)componentId coordinates:(DTRUIViewPixelCoordinate * _Nullable)coordinates viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("TouchPoint")
@interface DTRTouchPoint : NSObject
- (nonnull instancetype)initWithPoint:(CGPoint)point OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11DataroidSDK16TriggeredContext")
@interface TriggeredContext : NSObject
@property (nonatomic, copy) NSString * _Nonnull contextTriggerId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nonnull instancetype)initWithContextTriggerId:(NSString * _Nonnull)contextTriggerId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithContextTriggerId:(NSString * _Nonnull)contextTriggerId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface UIBarButtonItem (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_containsSensitiveObject;
@end


@interface UIBarButtonItem (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_isDebounceThresholdExclusion;
@end


@interface UIButton (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_containsSensitiveObject;
@end


@interface UIButton (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_isDebounceThresholdExclusion;
@end





@interface UISwitch (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_containsSensitiveObject;
@end


@interface UITextField (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_containsSensitiveObject;
@end



@interface UITextView (SWIFT_EXTENSION(DataroidSDK))
@property (nonatomic) BOOL dtr_containsSensitiveObject;
@end







SWIFT_CLASS_NAMED("UIViewPixelCoordinate")
@interface DTRUIViewPixelCoordinate : NSObject
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DTRUIViewPixelCoordinate (SWIFT_EXTENSION(DataroidSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end






@interface UNNotificationContent (SWIFT_EXTENSION(DataroidSDK))
/// Checks if the payload belongs to Dataroid
@property (nonatomic, readonly) BOOL isFromDataroid;
/// Checks if the given sdk key matches with push notification payload
- (BOOL)isMatchesWith:(NSString * _Nonnull)sdkKey SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("UserAttributes")
@interface DTRUserAttributes : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull collections;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface DTRUserAttributes (SWIFT_EXTENSION(DataroidSDK))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
@end



@class UNMutableNotificationContent;

SWIFT_CLASS("_TtC11DataroidSDK26UserNotificationIntegrator")
@interface UserNotificationIntegrator : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull languageCode;
@property (nonatomic, readonly, strong) DTRAppInbox * _Nullable inbox;
+ (UserNotificationIntegrator * _Nullable)initializeWithConfig:(DataroidConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (void)processWithContent:(UNMutableNotificationContent * _Nonnull)content completion:(void (^ _Nonnull)(UNMutableNotificationContent * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






/// Event attributes for event that user lists items within a specific category.
SWIFT_CLASS_NAMED("ViewCategoryEventAttributes")
@interface DTRViewCategoryEventAttributes : DTRAttributes
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Event attributes for event that whenever a single product is displayed.
SWIFT_CLASS_NAMED("ViewProductEventAttributes")
@interface DTRViewProductEventAttributes : DTRAttributes
- (nonnull instancetype)initWithProduct:(DTRProduct * _Nonnull)product OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ViewTrackingExtras")
@interface DTRViewTrackingExtras : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface DTRViewTrackingExtras (SWIFT_EXTENSION(DataroidSDK))
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end


@interface DTRViewTrackingExtras (SWIFT_EXTENSION(DataroidSDK))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
@end




#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
